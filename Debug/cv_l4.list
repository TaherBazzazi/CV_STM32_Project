
cv_l4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037f8  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001068  08003984  08003984  00013984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049ec  080049ec  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  080049ec  080049ec  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049ec  080049ec  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049ec  080049ec  000149ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049f0  080049f0  000149f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080049f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000480  20000020  08004a14  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a0  08004a14  000204a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ab4b  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ce3  00000000  00000000  0002ab9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  0002c880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000990  00000000  00000000  0002d300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f94d  00000000  00000000  0002dc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c1c8  00000000  00000000  0004d5dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bd5df  00000000  00000000  000597a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00116d84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002974  00000000  00000000  00116dd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000020 	.word	0x20000020
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800396c 	.word	0x0800396c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000024 	.word	0x20000024
 80001c8:	0800396c 	.word	0x0800396c

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d0:	f001 fa82 	bl	80016d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d4:	f000 f97a 	bl	80004cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f000 fa0a 	bl	80005f0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001dc:	f000 f9c8 	bl	8000570 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 80001e0:	f001 f878 	bl	80012d4 <ssd1306_Init>

  #define ENTITY(x,y)  Number_of_states++;
  	STATES
 80001e4:	4bb3      	ldr	r3, [pc, #716]	; (80004b4 <main+0x2e8>)
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	3301      	adds	r3, #1
 80001ea:	b2da      	uxtb	r2, r3
 80001ec:	4bb1      	ldr	r3, [pc, #708]	; (80004b4 <main+0x2e8>)
 80001ee:	701a      	strb	r2, [r3, #0]
 80001f0:	4bb0      	ldr	r3, [pc, #704]	; (80004b4 <main+0x2e8>)
 80001f2:	781b      	ldrb	r3, [r3, #0]
 80001f4:	3301      	adds	r3, #1
 80001f6:	b2da      	uxtb	r2, r3
 80001f8:	4bae      	ldr	r3, [pc, #696]	; (80004b4 <main+0x2e8>)
 80001fa:	701a      	strb	r2, [r3, #0]
 80001fc:	4bad      	ldr	r3, [pc, #692]	; (80004b4 <main+0x2e8>)
 80001fe:	781b      	ldrb	r3, [r3, #0]
 8000200:	3301      	adds	r3, #1
 8000202:	b2da      	uxtb	r2, r3
 8000204:	4bab      	ldr	r3, [pc, #684]	; (80004b4 <main+0x2e8>)
 8000206:	701a      	strb	r2, [r3, #0]
 8000208:	4baa      	ldr	r3, [pc, #680]	; (80004b4 <main+0x2e8>)
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	3301      	adds	r3, #1
 800020e:	b2da      	uxtb	r2, r3
 8000210:	4ba8      	ldr	r3, [pc, #672]	; (80004b4 <main+0x2e8>)
 8000212:	701a      	strb	r2, [r3, #0]
 8000214:	4ba7      	ldr	r3, [pc, #668]	; (80004b4 <main+0x2e8>)
 8000216:	781b      	ldrb	r3, [r3, #0]
 8000218:	3301      	adds	r3, #1
 800021a:	b2da      	uxtb	r2, r3
 800021c:	4ba5      	ldr	r3, [pc, #660]	; (80004b4 <main+0x2e8>)
 800021e:	701a      	strb	r2, [r3, #0]
 8000220:	4ba4      	ldr	r3, [pc, #656]	; (80004b4 <main+0x2e8>)
 8000222:	781b      	ldrb	r3, [r3, #0]
 8000224:	3301      	adds	r3, #1
 8000226:	b2da      	uxtb	r2, r3
 8000228:	4ba2      	ldr	r3, [pc, #648]	; (80004b4 <main+0x2e8>)
 800022a:	701a      	strb	r2, [r3, #0]
 800022c:	4ba1      	ldr	r3, [pc, #644]	; (80004b4 <main+0x2e8>)
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	3301      	adds	r3, #1
 8000232:	b2da      	uxtb	r2, r3
 8000234:	4b9f      	ldr	r3, [pc, #636]	; (80004b4 <main+0x2e8>)
 8000236:	701a      	strb	r2, [r3, #0]
 8000238:	4b9e      	ldr	r3, [pc, #632]	; (80004b4 <main+0x2e8>)
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	3301      	adds	r3, #1
 800023e:	b2da      	uxtb	r2, r3
 8000240:	4b9c      	ldr	r3, [pc, #624]	; (80004b4 <main+0x2e8>)
 8000242:	701a      	strb	r2, [r3, #0]
 8000244:	4b9b      	ldr	r3, [pc, #620]	; (80004b4 <main+0x2e8>)
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	3301      	adds	r3, #1
 800024a:	b2da      	uxtb	r2, r3
 800024c:	4b99      	ldr	r3, [pc, #612]	; (80004b4 <main+0x2e8>)
 800024e:	701a      	strb	r2, [r3, #0]
  #undef ENTITY

  	switch (Current_State){
 8000250:	4b99      	ldr	r3, [pc, #612]	; (80004b8 <main+0x2ec>)
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	2b08      	cmp	r3, #8
 8000256:	f200 80f1 	bhi.w	800043c <main+0x270>
 800025a:	a201      	add	r2, pc, #4	; (adr r2, 8000260 <main+0x94>)
 800025c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000260:	08000285 	.word	0x08000285
 8000264:	080002b7 	.word	0x080002b7
 8000268:	080002e9 	.word	0x080002e9
 800026c:	0800031b 	.word	0x0800031b
 8000270:	0800034d 	.word	0x0800034d
 8000274:	0800037d 	.word	0x0800037d
 8000278:	080003ad 	.word	0x080003ad
 800027c:	080003dd 	.word	0x080003dd
 8000280:	0800040d 	.word	0x0800040d
  		y(); \
  		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1) \
  		Current_State=(Current_State+1)%Number_of_states; \
  }\
  break;
  	STATES
 8000284:	f000 f9ee 	bl	8000664 <Idle_Function>
 8000288:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800028c:	488b      	ldr	r0, [pc, #556]	; (80004bc <main+0x2f0>)
 800028e:	f001 fd37 	bl	8001d00 <HAL_GPIO_ReadPin>
 8000292:	4603      	mov	r3, r0
 8000294:	2b01      	cmp	r3, #1
 8000296:	f040 80d7 	bne.w	8000448 <main+0x27c>
 800029a:	4b87      	ldr	r3, [pc, #540]	; (80004b8 <main+0x2ec>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	3301      	adds	r3, #1
 80002a0:	4a84      	ldr	r2, [pc, #528]	; (80004b4 <main+0x2e8>)
 80002a2:	7812      	ldrb	r2, [r2, #0]
 80002a4:	fb93 f1f2 	sdiv	r1, r3, r2
 80002a8:	fb01 f202 	mul.w	r2, r1, r2
 80002ac:	1a9b      	subs	r3, r3, r2
 80002ae:	b2da      	uxtb	r2, r3
 80002b0:	4b81      	ldr	r3, [pc, #516]	; (80004b8 <main+0x2ec>)
 80002b2:	701a      	strb	r2, [r3, #0]
 80002b4:	e0c8      	b.n	8000448 <main+0x27c>
 80002b6:	f000 f9df 	bl	8000678 <Start_Screen_Function>
 80002ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002be:	487f      	ldr	r0, [pc, #508]	; (80004bc <main+0x2f0>)
 80002c0:	f001 fd1e 	bl	8001d00 <HAL_GPIO_ReadPin>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b01      	cmp	r3, #1
 80002c8:	f040 80be 	bne.w	8000448 <main+0x27c>
 80002cc:	4b7a      	ldr	r3, [pc, #488]	; (80004b8 <main+0x2ec>)
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	3301      	adds	r3, #1
 80002d2:	4a78      	ldr	r2, [pc, #480]	; (80004b4 <main+0x2e8>)
 80002d4:	7812      	ldrb	r2, [r2, #0]
 80002d6:	fb93 f1f2 	sdiv	r1, r3, r2
 80002da:	fb01 f202 	mul.w	r2, r1, r2
 80002de:	1a9b      	subs	r3, r3, r2
 80002e0:	b2da      	uxtb	r2, r3
 80002e2:	4b75      	ldr	r3, [pc, #468]	; (80004b8 <main+0x2ec>)
 80002e4:	701a      	strb	r2, [r3, #0]
 80002e6:	e0af      	b.n	8000448 <main+0x27c>
 80002e8:	f000 fa36 	bl	8000758 <Main_Screen_Function>
 80002ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002f0:	4872      	ldr	r0, [pc, #456]	; (80004bc <main+0x2f0>)
 80002f2:	f001 fd05 	bl	8001d00 <HAL_GPIO_ReadPin>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b01      	cmp	r3, #1
 80002fa:	f040 80a5 	bne.w	8000448 <main+0x27c>
 80002fe:	4b6e      	ldr	r3, [pc, #440]	; (80004b8 <main+0x2ec>)
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	3301      	adds	r3, #1
 8000304:	4a6b      	ldr	r2, [pc, #428]	; (80004b4 <main+0x2e8>)
 8000306:	7812      	ldrb	r2, [r2, #0]
 8000308:	fb93 f1f2 	sdiv	r1, r3, r2
 800030c:	fb01 f202 	mul.w	r2, r1, r2
 8000310:	1a9b      	subs	r3, r3, r2
 8000312:	b2da      	uxtb	r2, r3
 8000314:	4b68      	ldr	r3, [pc, #416]	; (80004b8 <main+0x2ec>)
 8000316:	701a      	strb	r2, [r3, #0]
 8000318:	e096      	b.n	8000448 <main+0x27c>
 800031a:	f000 fab5 	bl	8000888 <Coordinates_Screen_Function>
 800031e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000322:	4866      	ldr	r0, [pc, #408]	; (80004bc <main+0x2f0>)
 8000324:	f001 fcec 	bl	8001d00 <HAL_GPIO_ReadPin>
 8000328:	4603      	mov	r3, r0
 800032a:	2b01      	cmp	r3, #1
 800032c:	f040 808c 	bne.w	8000448 <main+0x27c>
 8000330:	4b61      	ldr	r3, [pc, #388]	; (80004b8 <main+0x2ec>)
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	3301      	adds	r3, #1
 8000336:	4a5f      	ldr	r2, [pc, #380]	; (80004b4 <main+0x2e8>)
 8000338:	7812      	ldrb	r2, [r2, #0]
 800033a:	fb93 f1f2 	sdiv	r1, r3, r2
 800033e:	fb01 f202 	mul.w	r2, r1, r2
 8000342:	1a9b      	subs	r3, r3, r2
 8000344:	b2da      	uxtb	r2, r3
 8000346:	4b5c      	ldr	r3, [pc, #368]	; (80004b8 <main+0x2ec>)
 8000348:	701a      	strb	r2, [r3, #0]
 800034a:	e07d      	b.n	8000448 <main+0x27c>
 800034c:	f000 fb1c 	bl	8000988 <Skills_Screen_Function>
 8000350:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000354:	4859      	ldr	r0, [pc, #356]	; (80004bc <main+0x2f0>)
 8000356:	f001 fcd3 	bl	8001d00 <HAL_GPIO_ReadPin>
 800035a:	4603      	mov	r3, r0
 800035c:	2b01      	cmp	r3, #1
 800035e:	d173      	bne.n	8000448 <main+0x27c>
 8000360:	4b55      	ldr	r3, [pc, #340]	; (80004b8 <main+0x2ec>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	3301      	adds	r3, #1
 8000366:	4a53      	ldr	r2, [pc, #332]	; (80004b4 <main+0x2e8>)
 8000368:	7812      	ldrb	r2, [r2, #0]
 800036a:	fb93 f1f2 	sdiv	r1, r3, r2
 800036e:	fb01 f202 	mul.w	r2, r1, r2
 8000372:	1a9b      	subs	r3, r3, r2
 8000374:	b2da      	uxtb	r2, r3
 8000376:	4b50      	ldr	r3, [pc, #320]	; (80004b8 <main+0x2ec>)
 8000378:	701a      	strb	r2, [r3, #0]
 800037a:	e065      	b.n	8000448 <main+0x27c>
 800037c:	f000 fbe4 	bl	8000b48 <Languaes_Screen_Function>
 8000380:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000384:	484d      	ldr	r0, [pc, #308]	; (80004bc <main+0x2f0>)
 8000386:	f001 fcbb 	bl	8001d00 <HAL_GPIO_ReadPin>
 800038a:	4603      	mov	r3, r0
 800038c:	2b01      	cmp	r3, #1
 800038e:	d15b      	bne.n	8000448 <main+0x27c>
 8000390:	4b49      	ldr	r3, [pc, #292]	; (80004b8 <main+0x2ec>)
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	3301      	adds	r3, #1
 8000396:	4a47      	ldr	r2, [pc, #284]	; (80004b4 <main+0x2e8>)
 8000398:	7812      	ldrb	r2, [r2, #0]
 800039a:	fb93 f1f2 	sdiv	r1, r3, r2
 800039e:	fb01 f202 	mul.w	r2, r1, r2
 80003a2:	1a9b      	subs	r3, r3, r2
 80003a4:	b2da      	uxtb	r2, r3
 80003a6:	4b44      	ldr	r3, [pc, #272]	; (80004b8 <main+0x2ec>)
 80003a8:	701a      	strb	r2, [r3, #0]
 80003aa:	e04d      	b.n	8000448 <main+0x27c>
 80003ac:	f000 fc2c 	bl	8000c08 <Projects_Screen_Function>
 80003b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003b4:	4841      	ldr	r0, [pc, #260]	; (80004bc <main+0x2f0>)
 80003b6:	f001 fca3 	bl	8001d00 <HAL_GPIO_ReadPin>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b01      	cmp	r3, #1
 80003be:	d143      	bne.n	8000448 <main+0x27c>
 80003c0:	4b3d      	ldr	r3, [pc, #244]	; (80004b8 <main+0x2ec>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	3301      	adds	r3, #1
 80003c6:	4a3b      	ldr	r2, [pc, #236]	; (80004b4 <main+0x2e8>)
 80003c8:	7812      	ldrb	r2, [r2, #0]
 80003ca:	fb93 f1f2 	sdiv	r1, r3, r2
 80003ce:	fb01 f202 	mul.w	r2, r1, r2
 80003d2:	1a9b      	subs	r3, r3, r2
 80003d4:	b2da      	uxtb	r2, r3
 80003d6:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <main+0x2ec>)
 80003d8:	701a      	strb	r2, [r3, #0]
 80003da:	e035      	b.n	8000448 <main+0x27c>
 80003dc:	f000 fc94 	bl	8000d08 <Diplomas_Screen_Function>
 80003e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003e4:	4835      	ldr	r0, [pc, #212]	; (80004bc <main+0x2f0>)
 80003e6:	f001 fc8b 	bl	8001d00 <HAL_GPIO_ReadPin>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b01      	cmp	r3, #1
 80003ee:	d12b      	bne.n	8000448 <main+0x27c>
 80003f0:	4b31      	ldr	r3, [pc, #196]	; (80004b8 <main+0x2ec>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	3301      	adds	r3, #1
 80003f6:	4a2f      	ldr	r2, [pc, #188]	; (80004b4 <main+0x2e8>)
 80003f8:	7812      	ldrb	r2, [r2, #0]
 80003fa:	fb93 f1f2 	sdiv	r1, r3, r2
 80003fe:	fb01 f202 	mul.w	r2, r1, r2
 8000402:	1a9b      	subs	r3, r3, r2
 8000404:	b2da      	uxtb	r2, r3
 8000406:	4b2c      	ldr	r3, [pc, #176]	; (80004b8 <main+0x2ec>)
 8000408:	701a      	strb	r2, [r3, #0]
 800040a:	e01d      	b.n	8000448 <main+0x27c>
 800040c:	f000 fcfc 	bl	8000e08 <ProfessionalExperience_Screen_Function>
 8000410:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000414:	4829      	ldr	r0, [pc, #164]	; (80004bc <main+0x2f0>)
 8000416:	f001 fc73 	bl	8001d00 <HAL_GPIO_ReadPin>
 800041a:	4603      	mov	r3, r0
 800041c:	2b01      	cmp	r3, #1
 800041e:	d113      	bne.n	8000448 <main+0x27c>
 8000420:	4b25      	ldr	r3, [pc, #148]	; (80004b8 <main+0x2ec>)
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	3301      	adds	r3, #1
 8000426:	4a23      	ldr	r2, [pc, #140]	; (80004b4 <main+0x2e8>)
 8000428:	7812      	ldrb	r2, [r2, #0]
 800042a:	fb93 f1f2 	sdiv	r1, r3, r2
 800042e:	fb01 f202 	mul.w	r2, r1, r2
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	b2da      	uxtb	r2, r3
 8000436:	4b20      	ldr	r3, [pc, #128]	; (80004b8 <main+0x2ec>)
 8000438:	701a      	strb	r2, [r3, #0]
 800043a:	e005      	b.n	8000448 <main+0x27c>
  #undef ENTITY
  	default : {
  		ssd1306_Fill(White);
 800043c:	2001      	movs	r0, #1
 800043e:	f000 ffb3 	bl	80013a8 <ssd1306_Fill>
  		ssd1306_UpdateScreen();
 8000442:	f000 ffd5 	bl	80013f0 <ssd1306_UpdateScreen>
 8000446:	e000      	b.n	800044a <main+0x27e>
  	STATES
 8000448:	bf00      	nop
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {switch (Current_State){
 800044a:	4b1b      	ldr	r3, [pc, #108]	; (80004b8 <main+0x2ec>)
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	2b08      	cmp	r3, #8
 8000450:	d836      	bhi.n	80004c0 <main+0x2f4>
 8000452:	a201      	add	r2, pc, #4	; (adr r2, 8000458 <main+0x28c>)
 8000454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000458:	0800047d 	.word	0x0800047d
 800045c:	08000483 	.word	0x08000483
 8000460:	08000489 	.word	0x08000489
 8000464:	0800048f 	.word	0x0800048f
 8000468:	08000495 	.word	0x08000495
 800046c:	0800049b 	.word	0x0800049b
 8000470:	080004a1 	.word	0x080004a1
 8000474:	080004a7 	.word	0x080004a7
 8000478:	080004ad 	.word	0x080004ad
#define ENTITY(x,y) case(x): { \
		y(); \
}\
break;
		STATES
 800047c:	f000 f8f2 	bl	8000664 <Idle_Function>
 8000480:	e023      	b.n	80004ca <main+0x2fe>
 8000482:	f000 f8f9 	bl	8000678 <Start_Screen_Function>
 8000486:	e020      	b.n	80004ca <main+0x2fe>
 8000488:	f000 f966 	bl	8000758 <Main_Screen_Function>
 800048c:	e01d      	b.n	80004ca <main+0x2fe>
 800048e:	f000 f9fb 	bl	8000888 <Coordinates_Screen_Function>
 8000492:	e01a      	b.n	80004ca <main+0x2fe>
 8000494:	f000 fa78 	bl	8000988 <Skills_Screen_Function>
 8000498:	e017      	b.n	80004ca <main+0x2fe>
 800049a:	f000 fb55 	bl	8000b48 <Languaes_Screen_Function>
 800049e:	e014      	b.n	80004ca <main+0x2fe>
 80004a0:	f000 fbb2 	bl	8000c08 <Projects_Screen_Function>
 80004a4:	e011      	b.n	80004ca <main+0x2fe>
 80004a6:	f000 fc2f 	bl	8000d08 <Diplomas_Screen_Function>
 80004aa:	e00e      	b.n	80004ca <main+0x2fe>
 80004ac:	f000 fcac 	bl	8000e08 <ProfessionalExperience_Screen_Function>
 80004b0:	e00b      	b.n	80004ca <main+0x2fe>
 80004b2:	bf00      	nop
 80004b4:	20000092 	.word	0x20000092
 80004b8:	20000091 	.word	0x20000091
 80004bc:	48000800 	.word	0x48000800
#undef ENTITY
		default : {
			ssd1306_Fill(White);
 80004c0:	2001      	movs	r0, #1
 80004c2:	f000 ff71 	bl	80013a8 <ssd1306_Fill>
			ssd1306_UpdateScreen();
 80004c6:	f000 ff93 	bl	80013f0 <ssd1306_UpdateScreen>
  {switch (Current_State){
 80004ca:	e7be      	b.n	800044a <main+0x27e>

080004cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b096      	sub	sp, #88	; 0x58
 80004d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d2:	f107 0314 	add.w	r3, r7, #20
 80004d6:	2244      	movs	r2, #68	; 0x44
 80004d8:	2100      	movs	r1, #0
 80004da:	4618      	mov	r0, r3
 80004dc:	f003 fa3e 	bl	800395c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e0:	463b      	mov	r3, r7
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80004ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80004f2:	f002 f8d1 	bl	8002698 <HAL_PWREx_ControlVoltageScaling>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80004fc:	f000 fdb6 	bl	800106c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000500:	2302      	movs	r3, #2
 8000502:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000504:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000508:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800050a:	2310      	movs	r3, #16
 800050c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800050e:	2302      	movs	r3, #2
 8000510:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000512:	2302      	movs	r3, #2
 8000514:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000516:	2301      	movs	r3, #1
 8000518:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 800051a:	2314      	movs	r3, #20
 800051c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800051e:	2307      	movs	r3, #7
 8000520:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000522:	2302      	movs	r3, #2
 8000524:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 8000526:	2308      	movs	r3, #8
 8000528:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800052a:	f107 0314 	add.w	r3, r7, #20
 800052e:	4618      	mov	r0, r3
 8000530:	f002 f908 	bl	8002744 <HAL_RCC_OscConfig>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800053a:	f000 fd97 	bl	800106c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800053e:	230f      	movs	r3, #15
 8000540:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000542:	2303      	movs	r3, #3
 8000544:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000546:	2300      	movs	r3, #0
 8000548:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800054a:	2300      	movs	r3, #0
 800054c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800054e:	2300      	movs	r3, #0
 8000550:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000552:	463b      	mov	r3, r7
 8000554:	2102      	movs	r1, #2
 8000556:	4618      	mov	r0, r3
 8000558:	f002 fd08 	bl	8002f6c <HAL_RCC_ClockConfig>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000562:	f000 fd83 	bl	800106c <Error_Handler>
  }
}
 8000566:	bf00      	nop
 8000568:	3758      	adds	r7, #88	; 0x58
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
	...

08000570 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000574:	4b1b      	ldr	r3, [pc, #108]	; (80005e4 <MX_I2C1_Init+0x74>)
 8000576:	4a1c      	ldr	r2, [pc, #112]	; (80005e8 <MX_I2C1_Init+0x78>)
 8000578:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00909BEB;
 800057a:	4b1a      	ldr	r3, [pc, #104]	; (80005e4 <MX_I2C1_Init+0x74>)
 800057c:	4a1b      	ldr	r2, [pc, #108]	; (80005ec <MX_I2C1_Init+0x7c>)
 800057e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000580:	4b18      	ldr	r3, [pc, #96]	; (80005e4 <MX_I2C1_Init+0x74>)
 8000582:	2200      	movs	r2, #0
 8000584:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000586:	4b17      	ldr	r3, [pc, #92]	; (80005e4 <MX_I2C1_Init+0x74>)
 8000588:	2201      	movs	r2, #1
 800058a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800058c:	4b15      	ldr	r3, [pc, #84]	; (80005e4 <MX_I2C1_Init+0x74>)
 800058e:	2200      	movs	r2, #0
 8000590:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000592:	4b14      	ldr	r3, [pc, #80]	; (80005e4 <MX_I2C1_Init+0x74>)
 8000594:	2200      	movs	r2, #0
 8000596:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000598:	4b12      	ldr	r3, [pc, #72]	; (80005e4 <MX_I2C1_Init+0x74>)
 800059a:	2200      	movs	r2, #0
 800059c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800059e:	4b11      	ldr	r3, [pc, #68]	; (80005e4 <MX_I2C1_Init+0x74>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005a4:	4b0f      	ldr	r3, [pc, #60]	; (80005e4 <MX_I2C1_Init+0x74>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005aa:	480e      	ldr	r0, [pc, #56]	; (80005e4 <MX_I2C1_Init+0x74>)
 80005ac:	f001 fbd8 	bl	8001d60 <HAL_I2C_Init>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005b6:	f000 fd59 	bl	800106c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005ba:	2100      	movs	r1, #0
 80005bc:	4809      	ldr	r0, [pc, #36]	; (80005e4 <MX_I2C1_Init+0x74>)
 80005be:	f001 ffc5 	bl	800254c <HAL_I2CEx_ConfigAnalogFilter>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005c8:	f000 fd50 	bl	800106c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005cc:	2100      	movs	r1, #0
 80005ce:	4805      	ldr	r0, [pc, #20]	; (80005e4 <MX_I2C1_Init+0x74>)
 80005d0:	f002 f807 	bl	80025e2 <HAL_I2CEx_ConfigDigitalFilter>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005da:	f000 fd47 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	2000003c 	.word	0x2000003c
 80005e8:	40005400 	.word	0x40005400
 80005ec:	00909beb 	.word	0x00909beb

080005f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000604:	4b16      	ldr	r3, [pc, #88]	; (8000660 <MX_GPIO_Init+0x70>)
 8000606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000608:	4a15      	ldr	r2, [pc, #84]	; (8000660 <MX_GPIO_Init+0x70>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000610:	4b13      	ldr	r3, [pc, #76]	; (8000660 <MX_GPIO_Init+0x70>)
 8000612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000614:	f003 0301 	and.w	r3, r3, #1
 8000618:	603b      	str	r3, [r7, #0]
 800061a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800061c:	23f0      	movs	r3, #240	; 0xf0
 800061e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000620:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000624:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000626:	2301      	movs	r3, #1
 8000628:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	4619      	mov	r1, r3
 800062e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000632:	f001 f9fb 	bl	8001a2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000636:	2200      	movs	r2, #0
 8000638:	2100      	movs	r1, #0
 800063a:	200a      	movs	r0, #10
 800063c:	f001 f9bf 	bl	80019be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000640:	200a      	movs	r0, #10
 8000642:	f001 f9d8 	bl	80019f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000646:	2200      	movs	r2, #0
 8000648:	2100      	movs	r1, #0
 800064a:	2017      	movs	r0, #23
 800064c:	f001 f9b7 	bl	80019be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000650:	2017      	movs	r0, #23
 8000652:	f001 f9d0 	bl	80019f6 <HAL_NVIC_EnableIRQ>

}
 8000656:	bf00      	nop
 8000658:	3718      	adds	r7, #24
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40021000 	.word	0x40021000

08000664 <Idle_Function>:

/* USER CODE BEGIN 4 */
void Idle_Function(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	ssd1306_Fill(White);
 8000668:	2001      	movs	r0, #1
 800066a:	f000 fe9d 	bl	80013a8 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 800066e:	f000 febf 	bl	80013f0 <ssd1306_UpdateScreen>
}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <Start_Screen_Function>:

void Start_Screen_Function(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 800067c:	2000      	movs	r0, #0
 800067e:	f000 fe93 	bl	80013a8 <ssd1306_Fill>
	//------------Title---------------//
	ssd1306_SetCursor(MIDDLE_TITLE("Med Taher Bazzazi"),0);
 8000682:	2100      	movs	r1, #0
 8000684:	2005      	movs	r0, #5
 8000686:	f000 ffdd 	bl	8001644 <ssd1306_SetCursor>
	ret=ssd1306_WriteString("Med Taher Bazzazi", Font_7x10, White);
 800068a:	4a2a      	ldr	r2, [pc, #168]	; (8000734 <Start_Screen_Function+0xbc>)
 800068c:	2301      	movs	r3, #1
 800068e:	ca06      	ldmia	r2, {r1, r2}
 8000690:	4829      	ldr	r0, [pc, #164]	; (8000738 <Start_Screen_Function+0xc0>)
 8000692:	f000 ffb1 	bl	80015f8 <ssd1306_WriteString>
 8000696:	4603      	mov	r3, r0
 8000698:	461a      	mov	r2, r3
 800069a:	4b28      	ldr	r3, [pc, #160]	; (800073c <Start_Screen_Function+0xc4>)
 800069c:	701a      	strb	r2, [r3, #0]
	//------------body---------------//
	ssd1306_SetCursor(MIDDLE("Bonjouur"),line(1));
 800069e:	2110      	movs	r1, #16
 80006a0:	2028      	movs	r0, #40	; 0x28
 80006a2:	f000 ffcf 	bl	8001644 <ssd1306_SetCursor>
	ret=ssd1306_WriteString("Bonjouur", Font_6x8, White);
 80006a6:	4a26      	ldr	r2, [pc, #152]	; (8000740 <Start_Screen_Function+0xc8>)
 80006a8:	2301      	movs	r3, #1
 80006aa:	ca06      	ldmia	r2, {r1, r2}
 80006ac:	4825      	ldr	r0, [pc, #148]	; (8000744 <Start_Screen_Function+0xcc>)
 80006ae:	f000 ffa3 	bl	80015f8 <ssd1306_WriteString>
 80006b2:	4603      	mov	r3, r0
 80006b4:	461a      	mov	r2, r3
 80006b6:	4b21      	ldr	r3, [pc, #132]	; (800073c <Start_Screen_Function+0xc4>)
 80006b8:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(MIDDLE("C'est mon CV"),line(2));
 80006ba:	2118      	movs	r1, #24
 80006bc:	201c      	movs	r0, #28
 80006be:	f000 ffc1 	bl	8001644 <ssd1306_SetCursor>
	ret=ssd1306_WriteString("C'est mon CV", Font_6x8, White);
 80006c2:	4a1f      	ldr	r2, [pc, #124]	; (8000740 <Start_Screen_Function+0xc8>)
 80006c4:	2301      	movs	r3, #1
 80006c6:	ca06      	ldmia	r2, {r1, r2}
 80006c8:	481f      	ldr	r0, [pc, #124]	; (8000748 <Start_Screen_Function+0xd0>)
 80006ca:	f000 ff95 	bl	80015f8 <ssd1306_WriteString>
 80006ce:	4603      	mov	r3, r0
 80006d0:	461a      	mov	r2, r3
 80006d2:	4b1a      	ldr	r3, [pc, #104]	; (800073c <Start_Screen_Function+0xc4>)
 80006d4:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(MIDDLE("j'espere que"),line(3));
 80006d6:	2120      	movs	r1, #32
 80006d8:	201c      	movs	r0, #28
 80006da:	f000 ffb3 	bl	8001644 <ssd1306_SetCursor>
	ret=ssd1306_WriteString("j'espere que", Font_6x8, White);
 80006de:	4a18      	ldr	r2, [pc, #96]	; (8000740 <Start_Screen_Function+0xc8>)
 80006e0:	2301      	movs	r3, #1
 80006e2:	ca06      	ldmia	r2, {r1, r2}
 80006e4:	4819      	ldr	r0, [pc, #100]	; (800074c <Start_Screen_Function+0xd4>)
 80006e6:	f000 ff87 	bl	80015f8 <ssd1306_WriteString>
 80006ea:	4603      	mov	r3, r0
 80006ec:	461a      	mov	r2, r3
 80006ee:	4b13      	ldr	r3, [pc, #76]	; (800073c <Start_Screen_Function+0xc4>)
 80006f0:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(MIDDLE("vous l'aimez"),line(4));
 80006f2:	2128      	movs	r1, #40	; 0x28
 80006f4:	201c      	movs	r0, #28
 80006f6:	f000 ffa5 	bl	8001644 <ssd1306_SetCursor>
	ret=ssd1306_WriteString("vous l'aimez", Font_6x8, White);
 80006fa:	4a11      	ldr	r2, [pc, #68]	; (8000740 <Start_Screen_Function+0xc8>)
 80006fc:	2301      	movs	r3, #1
 80006fe:	ca06      	ldmia	r2, {r1, r2}
 8000700:	4813      	ldr	r0, [pc, #76]	; (8000750 <Start_Screen_Function+0xd8>)
 8000702:	f000 ff79 	bl	80015f8 <ssd1306_WriteString>
 8000706:	4603      	mov	r3, r0
 8000708:	461a      	mov	r2, r3
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <Start_Screen_Function+0xc4>)
 800070c:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(END(":)"),line(5));
 800070e:	2130      	movs	r1, #48	; 0x30
 8000710:	2074      	movs	r0, #116	; 0x74
 8000712:	f000 ff97 	bl	8001644 <ssd1306_SetCursor>
	ret=ssd1306_WriteString(":)", Font_6x8, White);
 8000716:	4a0a      	ldr	r2, [pc, #40]	; (8000740 <Start_Screen_Function+0xc8>)
 8000718:	2301      	movs	r3, #1
 800071a:	ca06      	ldmia	r2, {r1, r2}
 800071c:	480d      	ldr	r0, [pc, #52]	; (8000754 <Start_Screen_Function+0xdc>)
 800071e:	f000 ff6b 	bl	80015f8 <ssd1306_WriteString>
 8000722:	4603      	mov	r3, r0
 8000724:	461a      	mov	r2, r3
 8000726:	4b05      	ldr	r3, [pc, #20]	; (800073c <Start_Screen_Function+0xc4>)
 8000728:	701a      	strb	r2, [r3, #0]
	ssd1306_UpdateScreen();
 800072a:	f000 fe61 	bl	80013f0 <ssd1306_UpdateScreen>
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000010 	.word	0x20000010
 8000738:	08003984 	.word	0x08003984
 800073c:	20000090 	.word	0x20000090
 8000740:	20000008 	.word	0x20000008
 8000744:	08003998 	.word	0x08003998
 8000748:	080039a4 	.word	0x080039a4
 800074c:	080039b4 	.word	0x080039b4
 8000750:	080039c4 	.word	0x080039c4
 8000754:	080039d4 	.word	0x080039d4

08000758 <Main_Screen_Function>:

void Main_Screen_Function(void){
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 800075c:	2000      	movs	r0, #0
 800075e:	f000 fe23 	bl	80013a8 <ssd1306_Fill>
	//------------Title---------------//
	ssd1306_SetCursor(MIDDLE_TITLE("Menu principale"),0);
 8000762:	2100      	movs	r1, #0
 8000764:	200c      	movs	r0, #12
 8000766:	f000 ff6d 	bl	8001644 <ssd1306_SetCursor>
	ret=ssd1306_WriteString("Menu principale", Font_7x10, White);
 800076a:	4a3b      	ldr	r2, [pc, #236]	; (8000858 <Main_Screen_Function+0x100>)
 800076c:	2301      	movs	r3, #1
 800076e:	ca06      	ldmia	r2, {r1, r2}
 8000770:	483a      	ldr	r0, [pc, #232]	; (800085c <Main_Screen_Function+0x104>)
 8000772:	f000 ff41 	bl	80015f8 <ssd1306_WriteString>
 8000776:	4603      	mov	r3, r0
 8000778:	461a      	mov	r2, r3
 800077a:	4b39      	ldr	r3, [pc, #228]	; (8000860 <Main_Screen_Function+0x108>)
 800077c:	701a      	strb	r2, [r3, #0]
	//------------body---------------//
	ssd1306_SetCursor(7,line(1));
 800077e:	2110      	movs	r1, #16
 8000780:	2007      	movs	r0, #7
 8000782:	f000 ff5f 	bl	8001644 <ssd1306_SetCursor>
	ret=ssd1306_WriteString("Coordonnees", Font_6x8, White);
 8000786:	4a37      	ldr	r2, [pc, #220]	; (8000864 <Main_Screen_Function+0x10c>)
 8000788:	2301      	movs	r3, #1
 800078a:	ca06      	ldmia	r2, {r1, r2}
 800078c:	4836      	ldr	r0, [pc, #216]	; (8000868 <Main_Screen_Function+0x110>)
 800078e:	f000 ff33 	bl	80015f8 <ssd1306_WriteString>
 8000792:	4603      	mov	r3, r0
 8000794:	461a      	mov	r2, r3
 8000796:	4b32      	ldr	r3, [pc, #200]	; (8000860 <Main_Screen_Function+0x108>)
 8000798:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(7,line(2));
 800079a:	2118      	movs	r1, #24
 800079c:	2007      	movs	r0, #7
 800079e:	f000 ff51 	bl	8001644 <ssd1306_SetCursor>
	ret=ssd1306_WriteString("Competences", Font_6x8, White);
 80007a2:	4a30      	ldr	r2, [pc, #192]	; (8000864 <Main_Screen_Function+0x10c>)
 80007a4:	2301      	movs	r3, #1
 80007a6:	ca06      	ldmia	r2, {r1, r2}
 80007a8:	4830      	ldr	r0, [pc, #192]	; (800086c <Main_Screen_Function+0x114>)
 80007aa:	f000 ff25 	bl	80015f8 <ssd1306_WriteString>
 80007ae:	4603      	mov	r3, r0
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b2b      	ldr	r3, [pc, #172]	; (8000860 <Main_Screen_Function+0x108>)
 80007b4:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(7,line(3));
 80007b6:	2120      	movs	r1, #32
 80007b8:	2007      	movs	r0, #7
 80007ba:	f000 ff43 	bl	8001644 <ssd1306_SetCursor>
	ret=ssd1306_WriteString("Langues", Font_6x8, White);
 80007be:	4a29      	ldr	r2, [pc, #164]	; (8000864 <Main_Screen_Function+0x10c>)
 80007c0:	2301      	movs	r3, #1
 80007c2:	ca06      	ldmia	r2, {r1, r2}
 80007c4:	482a      	ldr	r0, [pc, #168]	; (8000870 <Main_Screen_Function+0x118>)
 80007c6:	f000 ff17 	bl	80015f8 <ssd1306_WriteString>
 80007ca:	4603      	mov	r3, r0
 80007cc:	461a      	mov	r2, r3
 80007ce:	4b24      	ldr	r3, [pc, #144]	; (8000860 <Main_Screen_Function+0x108>)
 80007d0:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(7,line(4));
 80007d2:	2128      	movs	r1, #40	; 0x28
 80007d4:	2007      	movs	r0, #7
 80007d6:	f000 ff35 	bl	8001644 <ssd1306_SetCursor>
	ret=ssd1306_WriteString("Projets", Font_6x8, White);
 80007da:	4a22      	ldr	r2, [pc, #136]	; (8000864 <Main_Screen_Function+0x10c>)
 80007dc:	2301      	movs	r3, #1
 80007de:	ca06      	ldmia	r2, {r1, r2}
 80007e0:	4824      	ldr	r0, [pc, #144]	; (8000874 <Main_Screen_Function+0x11c>)
 80007e2:	f000 ff09 	bl	80015f8 <ssd1306_WriteString>
 80007e6:	4603      	mov	r3, r0
 80007e8:	461a      	mov	r2, r3
 80007ea:	4b1d      	ldr	r3, [pc, #116]	; (8000860 <Main_Screen_Function+0x108>)
 80007ec:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(7,line(5));
 80007ee:	2130      	movs	r1, #48	; 0x30
 80007f0:	2007      	movs	r0, #7
 80007f2:	f000 ff27 	bl	8001644 <ssd1306_SetCursor>
	ret=ssd1306_WriteString("Formation", Font_6x8, White);
 80007f6:	4a1b      	ldr	r2, [pc, #108]	; (8000864 <Main_Screen_Function+0x10c>)
 80007f8:	2301      	movs	r3, #1
 80007fa:	ca06      	ldmia	r2, {r1, r2}
 80007fc:	481e      	ldr	r0, [pc, #120]	; (8000878 <Main_Screen_Function+0x120>)
 80007fe:	f000 fefb 	bl	80015f8 <ssd1306_WriteString>
 8000802:	4603      	mov	r3, r0
 8000804:	461a      	mov	r2, r3
 8000806:	4b16      	ldr	r3, [pc, #88]	; (8000860 <Main_Screen_Function+0x108>)
 8000808:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(7,line(6));
 800080a:	2138      	movs	r1, #56	; 0x38
 800080c:	2007      	movs	r0, #7
 800080e:	f000 ff19 	bl	8001644 <ssd1306_SetCursor>
	ret=ssd1306_WriteString("Experience Pro.", Font_6x8, White);
 8000812:	4a14      	ldr	r2, [pc, #80]	; (8000864 <Main_Screen_Function+0x10c>)
 8000814:	2301      	movs	r3, #1
 8000816:	ca06      	ldmia	r2, {r1, r2}
 8000818:	4818      	ldr	r0, [pc, #96]	; (800087c <Main_Screen_Function+0x124>)
 800081a:	f000 feed 	bl	80015f8 <ssd1306_WriteString>
 800081e:	4603      	mov	r3, r0
 8000820:	461a      	mov	r2, r3
 8000822:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <Main_Screen_Function+0x108>)
 8000824:	701a      	strb	r2, [r3, #0]

	ssd1306_SetCursor(0,line(Choice));
 8000826:	4b16      	ldr	r3, [pc, #88]	; (8000880 <Main_Screen_Function+0x128>)
 8000828:	f993 3000 	ldrsb.w	r3, [r3]
 800082c:	3301      	adds	r3, #1
 800082e:	b2db      	uxtb	r3, r3
 8000830:	00db      	lsls	r3, r3, #3
 8000832:	b2db      	uxtb	r3, r3
 8000834:	4619      	mov	r1, r3
 8000836:	2000      	movs	r0, #0
 8000838:	f000 ff04 	bl	8001644 <ssd1306_SetCursor>
	ret=ssd1306_WriteString("-", Font_6x8, White);
 800083c:	4a09      	ldr	r2, [pc, #36]	; (8000864 <Main_Screen_Function+0x10c>)
 800083e:	2301      	movs	r3, #1
 8000840:	ca06      	ldmia	r2, {r1, r2}
 8000842:	4810      	ldr	r0, [pc, #64]	; (8000884 <Main_Screen_Function+0x12c>)
 8000844:	f000 fed8 	bl	80015f8 <ssd1306_WriteString>
 8000848:	4603      	mov	r3, r0
 800084a:	461a      	mov	r2, r3
 800084c:	4b04      	ldr	r3, [pc, #16]	; (8000860 <Main_Screen_Function+0x108>)
 800084e:	701a      	strb	r2, [r3, #0]
	ssd1306_UpdateScreen();
 8000850:	f000 fdce 	bl	80013f0 <ssd1306_UpdateScreen>
}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000010 	.word	0x20000010
 800085c:	080039d8 	.word	0x080039d8
 8000860:	20000090 	.word	0x20000090
 8000864:	20000008 	.word	0x20000008
 8000868:	080039e8 	.word	0x080039e8
 800086c:	080039f4 	.word	0x080039f4
 8000870:	08003a00 	.word	0x08003a00
 8000874:	08003a08 	.word	0x08003a08
 8000878:	08003a10 	.word	0x08003a10
 800087c:	08003a1c 	.word	0x08003a1c
 8000880:	20000000 	.word	0x20000000
 8000884:	08003a2c 	.word	0x08003a2c

08000888 <Coordinates_Screen_Function>:
void Coordinates_Screen_Function(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 800088c:	2000      	movs	r0, #0
 800088e:	f000 fd8b 	bl	80013a8 <ssd1306_Fill>
	//------------Title---------------//
	ssd1306_SetCursor(MIDDLE_TITLE("Coordonnees"),0);
 8000892:	2100      	movs	r1, #0
 8000894:	201a      	movs	r0, #26
 8000896:	f000 fed5 	bl	8001644 <ssd1306_SetCursor>
	ret=ssd1306_WriteString("Coordonnees", Font_7x10, White);
 800089a:	4a31      	ldr	r2, [pc, #196]	; (8000960 <Coordinates_Screen_Function+0xd8>)
 800089c:	2301      	movs	r3, #1
 800089e:	ca06      	ldmia	r2, {r1, r2}
 80008a0:	4830      	ldr	r0, [pc, #192]	; (8000964 <Coordinates_Screen_Function+0xdc>)
 80008a2:	f000 fea9 	bl	80015f8 <ssd1306_WriteString>
 80008a6:	4603      	mov	r3, r0
 80008a8:	461a      	mov	r2, r3
 80008aa:	4b2f      	ldr	r3, [pc, #188]	; (8000968 <Coordinates_Screen_Function+0xe0>)
 80008ac:	701a      	strb	r2, [r3, #0]
	//------------body---------------//
	ssd1306_SetCursor(0,line(1));
 80008ae:	2110      	movs	r1, #16
 80008b0:	2000      	movs	r0, #0
 80008b2:	f000 fec7 	bl	8001644 <ssd1306_SetCursor>
	ret=ssd1306_WriteString("taher.bazzazi@ieeeorg", Font_6x8, White);
 80008b6:	4a2d      	ldr	r2, [pc, #180]	; (800096c <Coordinates_Screen_Function+0xe4>)
 80008b8:	2301      	movs	r3, #1
 80008ba:	ca06      	ldmia	r2, {r1, r2}
 80008bc:	482c      	ldr	r0, [pc, #176]	; (8000970 <Coordinates_Screen_Function+0xe8>)
 80008be:	f000 fe9b 	bl	80015f8 <ssd1306_WriteString>
 80008c2:	4603      	mov	r3, r0
 80008c4:	461a      	mov	r2, r3
 80008c6:	4b28      	ldr	r3, [pc, #160]	; (8000968 <Coordinates_Screen_Function+0xe0>)
 80008c8:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(0,line(2));
 80008ca:	2118      	movs	r1, #24
 80008cc:	2000      	movs	r0, #0
 80008ce:	f000 feb9 	bl	8001644 <ssd1306_SetCursor>
	ret=ssd1306_WriteString("LinkedIn:mohamed-tahe", Font_6x8, White);
 80008d2:	4a26      	ldr	r2, [pc, #152]	; (800096c <Coordinates_Screen_Function+0xe4>)
 80008d4:	2301      	movs	r3, #1
 80008d6:	ca06      	ldmia	r2, {r1, r2}
 80008d8:	4826      	ldr	r0, [pc, #152]	; (8000974 <Coordinates_Screen_Function+0xec>)
 80008da:	f000 fe8d 	bl	80015f8 <ssd1306_WriteString>
 80008de:	4603      	mov	r3, r0
 80008e0:	461a      	mov	r2, r3
 80008e2:	4b21      	ldr	r3, [pc, #132]	; (8000968 <Coordinates_Screen_Function+0xe0>)
 80008e4:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(MIDDLE("r-bazzazi-408395204"),line(3));
 80008e6:	2120      	movs	r1, #32
 80008e8:	2007      	movs	r0, #7
 80008ea:	f000 feab 	bl	8001644 <ssd1306_SetCursor>
	ret=ssd1306_WriteString("r-bazzazi-408395204", Font_6x8, White);
 80008ee:	4a1f      	ldr	r2, [pc, #124]	; (800096c <Coordinates_Screen_Function+0xe4>)
 80008f0:	2301      	movs	r3, #1
 80008f2:	ca06      	ldmia	r2, {r1, r2}
 80008f4:	4820      	ldr	r0, [pc, #128]	; (8000978 <Coordinates_Screen_Function+0xf0>)
 80008f6:	f000 fe7f 	bl	80015f8 <ssd1306_WriteString>
 80008fa:	4603      	mov	r3, r0
 80008fc:	461a      	mov	r2, r3
 80008fe:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <Coordinates_Screen_Function+0xe0>)
 8000900:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(MIDDLE("Nancy (54000)"),line(4));
 8000902:	2128      	movs	r1, #40	; 0x28
 8000904:	2019      	movs	r0, #25
 8000906:	f000 fe9d 	bl	8001644 <ssd1306_SetCursor>
	ret=ssd1306_WriteString("Nancy (54000)", Font_6x8, White);
 800090a:	4a18      	ldr	r2, [pc, #96]	; (800096c <Coordinates_Screen_Function+0xe4>)
 800090c:	2301      	movs	r3, #1
 800090e:	ca06      	ldmia	r2, {r1, r2}
 8000910:	481a      	ldr	r0, [pc, #104]	; (800097c <Coordinates_Screen_Function+0xf4>)
 8000912:	f000 fe71 	bl	80015f8 <ssd1306_WriteString>
 8000916:	4603      	mov	r3, r0
 8000918:	461a      	mov	r2, r3
 800091a:	4b13      	ldr	r3, [pc, #76]	; (8000968 <Coordinates_Screen_Function+0xe0>)
 800091c:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(MIDDLE("+33 7 57 67 96 07"),line(5));
 800091e:	2130      	movs	r1, #48	; 0x30
 8000920:	200d      	movs	r0, #13
 8000922:	f000 fe8f 	bl	8001644 <ssd1306_SetCursor>
	ret=ssd1306_WriteString("+33 7 57 67 96 07", Font_6x8, White);
 8000926:	4a11      	ldr	r2, [pc, #68]	; (800096c <Coordinates_Screen_Function+0xe4>)
 8000928:	2301      	movs	r3, #1
 800092a:	ca06      	ldmia	r2, {r1, r2}
 800092c:	4814      	ldr	r0, [pc, #80]	; (8000980 <Coordinates_Screen_Function+0xf8>)
 800092e:	f000 fe63 	bl	80015f8 <ssd1306_WriteString>
 8000932:	4603      	mov	r3, r0
 8000934:	461a      	mov	r2, r3
 8000936:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <Coordinates_Screen_Function+0xe0>)
 8000938:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(MIDDLE("22/04/1999"),line(6));
 800093a:	2138      	movs	r1, #56	; 0x38
 800093c:	2022      	movs	r0, #34	; 0x22
 800093e:	f000 fe81 	bl	8001644 <ssd1306_SetCursor>
	ret=ssd1306_WriteString("22/04/1999", Font_6x8, White);
 8000942:	4a0a      	ldr	r2, [pc, #40]	; (800096c <Coordinates_Screen_Function+0xe4>)
 8000944:	2301      	movs	r3, #1
 8000946:	ca06      	ldmia	r2, {r1, r2}
 8000948:	480e      	ldr	r0, [pc, #56]	; (8000984 <Coordinates_Screen_Function+0xfc>)
 800094a:	f000 fe55 	bl	80015f8 <ssd1306_WriteString>
 800094e:	4603      	mov	r3, r0
 8000950:	461a      	mov	r2, r3
 8000952:	4b05      	ldr	r3, [pc, #20]	; (8000968 <Coordinates_Screen_Function+0xe0>)
 8000954:	701a      	strb	r2, [r3, #0]

	ssd1306_UpdateScreen();
 8000956:	f000 fd4b 	bl	80013f0 <ssd1306_UpdateScreen>
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000010 	.word	0x20000010
 8000964:	080039e8 	.word	0x080039e8
 8000968:	20000090 	.word	0x20000090
 800096c:	20000008 	.word	0x20000008
 8000970:	08003a30 	.word	0x08003a30
 8000974:	08003a48 	.word	0x08003a48
 8000978:	08003a60 	.word	0x08003a60
 800097c:	08003a74 	.word	0x08003a74
 8000980:	08003a84 	.word	0x08003a84
 8000984:	08003a98 	.word	0x08003a98

08000988 <Skills_Screen_Function>:
void Skills_Screen_Function(void){
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 800098c:	2000      	movs	r0, #0
 800098e:	f000 fd0b 	bl	80013a8 <ssd1306_Fill>
	//------------Title---------------//
	ssd1306_SetCursor(MIDDLE_TITLE("Competences"),0);
 8000992:	2100      	movs	r1, #0
 8000994:	201a      	movs	r0, #26
 8000996:	f000 fe55 	bl	8001644 <ssd1306_SetCursor>
	ret=ssd1306_WriteString("Competences", Font_7x10, White);
 800099a:	4a5b      	ldr	r2, [pc, #364]	; (8000b08 <Skills_Screen_Function+0x180>)
 800099c:	2301      	movs	r3, #1
 800099e:	ca06      	ldmia	r2, {r1, r2}
 80009a0:	485a      	ldr	r0, [pc, #360]	; (8000b0c <Skills_Screen_Function+0x184>)
 80009a2:	f000 fe29 	bl	80015f8 <ssd1306_WriteString>
 80009a6:	4603      	mov	r3, r0
 80009a8:	461a      	mov	r2, r3
 80009aa:	4b59      	ldr	r3, [pc, #356]	; (8000b10 <Skills_Screen_Function+0x188>)
 80009ac:	701a      	strb	r2, [r3, #0]
	//------------body---------------//

	PRINT3(1,"C","C++","VHDL");
 80009ae:	2110      	movs	r1, #16
 80009b0:	2000      	movs	r0, #0
 80009b2:	f000 fe47 	bl	8001644 <ssd1306_SetCursor>
 80009b6:	4a57      	ldr	r2, [pc, #348]	; (8000b14 <Skills_Screen_Function+0x18c>)
 80009b8:	2301      	movs	r3, #1
 80009ba:	ca06      	ldmia	r2, {r1, r2}
 80009bc:	4856      	ldr	r0, [pc, #344]	; (8000b18 <Skills_Screen_Function+0x190>)
 80009be:	f000 fe1b 	bl	80015f8 <ssd1306_WriteString>
 80009c2:	4603      	mov	r3, r0
 80009c4:	461a      	mov	r2, r3
 80009c6:	4b52      	ldr	r3, [pc, #328]	; (8000b10 <Skills_Screen_Function+0x188>)
 80009c8:	701a      	strb	r2, [r3, #0]
 80009ca:	2110      	movs	r1, #16
 80009cc:	2037      	movs	r0, #55	; 0x37
 80009ce:	f000 fe39 	bl	8001644 <ssd1306_SetCursor>
 80009d2:	4a50      	ldr	r2, [pc, #320]	; (8000b14 <Skills_Screen_Function+0x18c>)
 80009d4:	2301      	movs	r3, #1
 80009d6:	ca06      	ldmia	r2, {r1, r2}
 80009d8:	4850      	ldr	r0, [pc, #320]	; (8000b1c <Skills_Screen_Function+0x194>)
 80009da:	f000 fe0d 	bl	80015f8 <ssd1306_WriteString>
 80009de:	4603      	mov	r3, r0
 80009e0:	461a      	mov	r2, r3
 80009e2:	4b4b      	ldr	r3, [pc, #300]	; (8000b10 <Skills_Screen_Function+0x188>)
 80009e4:	701a      	strb	r2, [r3, #0]
 80009e6:	2110      	movs	r1, #16
 80009e8:	2068      	movs	r0, #104	; 0x68
 80009ea:	f000 fe2b 	bl	8001644 <ssd1306_SetCursor>
 80009ee:	4a49      	ldr	r2, [pc, #292]	; (8000b14 <Skills_Screen_Function+0x18c>)
 80009f0:	2301      	movs	r3, #1
 80009f2:	ca06      	ldmia	r2, {r1, r2}
 80009f4:	484a      	ldr	r0, [pc, #296]	; (8000b20 <Skills_Screen_Function+0x198>)
 80009f6:	f000 fdff 	bl	80015f8 <ssd1306_WriteString>
 80009fa:	4603      	mov	r3, r0
 80009fc:	461a      	mov	r2, r3
 80009fe:	4b44      	ldr	r3, [pc, #272]	; (8000b10 <Skills_Screen_Function+0x188>)
 8000a00:	701a      	strb	r2, [r3, #0]

	PRINT3(4,"Jave","Python","Rust");
 8000a02:	2128      	movs	r1, #40	; 0x28
 8000a04:	2000      	movs	r0, #0
 8000a06:	f000 fe1d 	bl	8001644 <ssd1306_SetCursor>
 8000a0a:	4a42      	ldr	r2, [pc, #264]	; (8000b14 <Skills_Screen_Function+0x18c>)
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	ca06      	ldmia	r2, {r1, r2}
 8000a10:	4844      	ldr	r0, [pc, #272]	; (8000b24 <Skills_Screen_Function+0x19c>)
 8000a12:	f000 fdf1 	bl	80015f8 <ssd1306_WriteString>
 8000a16:	4603      	mov	r3, r0
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4b3d      	ldr	r3, [pc, #244]	; (8000b10 <Skills_Screen_Function+0x188>)
 8000a1c:	701a      	strb	r2, [r3, #0]
 8000a1e:	2128      	movs	r1, #40	; 0x28
 8000a20:	202e      	movs	r0, #46	; 0x2e
 8000a22:	f000 fe0f 	bl	8001644 <ssd1306_SetCursor>
 8000a26:	4a3b      	ldr	r2, [pc, #236]	; (8000b14 <Skills_Screen_Function+0x18c>)
 8000a28:	2301      	movs	r3, #1
 8000a2a:	ca06      	ldmia	r2, {r1, r2}
 8000a2c:	483e      	ldr	r0, [pc, #248]	; (8000b28 <Skills_Screen_Function+0x1a0>)
 8000a2e:	f000 fde3 	bl	80015f8 <ssd1306_WriteString>
 8000a32:	4603      	mov	r3, r0
 8000a34:	461a      	mov	r2, r3
 8000a36:	4b36      	ldr	r3, [pc, #216]	; (8000b10 <Skills_Screen_Function+0x188>)
 8000a38:	701a      	strb	r2, [r3, #0]
 8000a3a:	2128      	movs	r1, #40	; 0x28
 8000a3c:	2068      	movs	r0, #104	; 0x68
 8000a3e:	f000 fe01 	bl	8001644 <ssd1306_SetCursor>
 8000a42:	4a34      	ldr	r2, [pc, #208]	; (8000b14 <Skills_Screen_Function+0x18c>)
 8000a44:	2301      	movs	r3, #1
 8000a46:	ca06      	ldmia	r2, {r1, r2}
 8000a48:	4838      	ldr	r0, [pc, #224]	; (8000b2c <Skills_Screen_Function+0x1a4>)
 8000a4a:	f000 fdd5 	bl	80015f8 <ssd1306_WriteString>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	461a      	mov	r2, r3
 8000a52:	4b2f      	ldr	r3, [pc, #188]	; (8000b10 <Skills_Screen_Function+0x188>)
 8000a54:	701a      	strb	r2, [r3, #0]

	PRINT2(2,"STM32","RaspberryPi");
 8000a56:	2118      	movs	r1, #24
 8000a58:	2005      	movs	r0, #5
 8000a5a:	f000 fdf3 	bl	8001644 <ssd1306_SetCursor>
 8000a5e:	4a2d      	ldr	r2, [pc, #180]	; (8000b14 <Skills_Screen_Function+0x18c>)
 8000a60:	2301      	movs	r3, #1
 8000a62:	ca06      	ldmia	r2, {r1, r2}
 8000a64:	4832      	ldr	r0, [pc, #200]	; (8000b30 <Skills_Screen_Function+0x1a8>)
 8000a66:	f000 fdc7 	bl	80015f8 <ssd1306_WriteString>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	4b28      	ldr	r3, [pc, #160]	; (8000b10 <Skills_Screen_Function+0x188>)
 8000a70:	701a      	strb	r2, [r3, #0]
 8000a72:	2118      	movs	r1, #24
 8000a74:	2039      	movs	r0, #57	; 0x39
 8000a76:	f000 fde5 	bl	8001644 <ssd1306_SetCursor>
 8000a7a:	4a26      	ldr	r2, [pc, #152]	; (8000b14 <Skills_Screen_Function+0x18c>)
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	ca06      	ldmia	r2, {r1, r2}
 8000a80:	482c      	ldr	r0, [pc, #176]	; (8000b34 <Skills_Screen_Function+0x1ac>)
 8000a82:	f000 fdb9 	bl	80015f8 <ssd1306_WriteString>
 8000a86:	4603      	mov	r3, r0
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4b21      	ldr	r3, [pc, #132]	; (8000b10 <Skills_Screen_Function+0x188>)
 8000a8c:	701a      	strb	r2, [r3, #0]

	ssd1306_SetCursor(MIDDLE("Arduino"),line(3));
 8000a8e:	2120      	movs	r1, #32
 8000a90:	202b      	movs	r0, #43	; 0x2b
 8000a92:	f000 fdd7 	bl	8001644 <ssd1306_SetCursor>
	ret=ssd1306_WriteString("Arduino", Font_6x8, White);
 8000a96:	4a1f      	ldr	r2, [pc, #124]	; (8000b14 <Skills_Screen_Function+0x18c>)
 8000a98:	2301      	movs	r3, #1
 8000a9a:	ca06      	ldmia	r2, {r1, r2}
 8000a9c:	4826      	ldr	r0, [pc, #152]	; (8000b38 <Skills_Screen_Function+0x1b0>)
 8000a9e:	f000 fdab 	bl	80015f8 <ssd1306_WriteString>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4b1a      	ldr	r3, [pc, #104]	; (8000b10 <Skills_Screen_Function+0x188>)
 8000aa8:	701a      	strb	r2, [r3, #0]

	PRINT2(5,"Matlab","Simulink");
 8000aaa:	2130      	movs	r1, #48	; 0x30
 8000aac:	2005      	movs	r0, #5
 8000aae:	f000 fdc9 	bl	8001644 <ssd1306_SetCursor>
 8000ab2:	4a18      	ldr	r2, [pc, #96]	; (8000b14 <Skills_Screen_Function+0x18c>)
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	ca06      	ldmia	r2, {r1, r2}
 8000ab8:	4820      	ldr	r0, [pc, #128]	; (8000b3c <Skills_Screen_Function+0x1b4>)
 8000aba:	f000 fd9d 	bl	80015f8 <ssd1306_WriteString>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <Skills_Screen_Function+0x188>)
 8000ac4:	701a      	strb	r2, [r3, #0]
 8000ac6:	2130      	movs	r1, #48	; 0x30
 8000ac8:	204b      	movs	r0, #75	; 0x4b
 8000aca:	f000 fdbb 	bl	8001644 <ssd1306_SetCursor>
 8000ace:	4a11      	ldr	r2, [pc, #68]	; (8000b14 <Skills_Screen_Function+0x18c>)
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	ca06      	ldmia	r2, {r1, r2}
 8000ad4:	481a      	ldr	r0, [pc, #104]	; (8000b40 <Skills_Screen_Function+0x1b8>)
 8000ad6:	f000 fd8f 	bl	80015f8 <ssd1306_WriteString>
 8000ada:	4603      	mov	r3, r0
 8000adc:	461a      	mov	r2, r3
 8000ade:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <Skills_Screen_Function+0x188>)
 8000ae0:	701a      	strb	r2, [r3, #0]

	ssd1306_SetCursor(MIDDLE("Git/Github"),line(6));
 8000ae2:	2138      	movs	r1, #56	; 0x38
 8000ae4:	2022      	movs	r0, #34	; 0x22
 8000ae6:	f000 fdad 	bl	8001644 <ssd1306_SetCursor>
	ret=ssd1306_WriteString("Git/Github", Font_6x8, White);
 8000aea:	4a0a      	ldr	r2, [pc, #40]	; (8000b14 <Skills_Screen_Function+0x18c>)
 8000aec:	2301      	movs	r3, #1
 8000aee:	ca06      	ldmia	r2, {r1, r2}
 8000af0:	4814      	ldr	r0, [pc, #80]	; (8000b44 <Skills_Screen_Function+0x1bc>)
 8000af2:	f000 fd81 	bl	80015f8 <ssd1306_WriteString>
 8000af6:	4603      	mov	r3, r0
 8000af8:	461a      	mov	r2, r3
 8000afa:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <Skills_Screen_Function+0x188>)
 8000afc:	701a      	strb	r2, [r3, #0]

	ssd1306_UpdateScreen();
 8000afe:	f000 fc77 	bl	80013f0 <ssd1306_UpdateScreen>
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000010 	.word	0x20000010
 8000b0c:	080039f4 	.word	0x080039f4
 8000b10:	20000090 	.word	0x20000090
 8000b14:	20000008 	.word	0x20000008
 8000b18:	08003aa4 	.word	0x08003aa4
 8000b1c:	08003aa8 	.word	0x08003aa8
 8000b20:	08003aac 	.word	0x08003aac
 8000b24:	08003ab4 	.word	0x08003ab4
 8000b28:	08003abc 	.word	0x08003abc
 8000b2c:	08003ac4 	.word	0x08003ac4
 8000b30:	08003acc 	.word	0x08003acc
 8000b34:	08003ad4 	.word	0x08003ad4
 8000b38:	08003ae0 	.word	0x08003ae0
 8000b3c:	08003ae8 	.word	0x08003ae8
 8000b40:	08003af0 	.word	0x08003af0
 8000b44:	08003afc 	.word	0x08003afc

08000b48 <Languaes_Screen_Function>:
void Languaes_Screen_Function(void){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	f000 fc2b 	bl	80013a8 <ssd1306_Fill>
	//------------Title---------------//
	ssd1306_SetCursor(MIDDLE_TITLE("Langues"),0);
 8000b52:	2100      	movs	r1, #0
 8000b54:	2028      	movs	r0, #40	; 0x28
 8000b56:	f000 fd75 	bl	8001644 <ssd1306_SetCursor>
	ret=ssd1306_WriteString("Langues", Font_7x10, White);
 8000b5a:	4a23      	ldr	r2, [pc, #140]	; (8000be8 <Languaes_Screen_Function+0xa0>)
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	ca06      	ldmia	r2, {r1, r2}
 8000b60:	4822      	ldr	r0, [pc, #136]	; (8000bec <Languaes_Screen_Function+0xa4>)
 8000b62:	f000 fd49 	bl	80015f8 <ssd1306_WriteString>
 8000b66:	4603      	mov	r3, r0
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b21      	ldr	r3, [pc, #132]	; (8000bf0 <Languaes_Screen_Function+0xa8>)
 8000b6c:	701a      	strb	r2, [r3, #0]
	//------------body---------------//
	ssd1306_SetCursor(MIDDLE("Francais"),line(2));
 8000b6e:	2118      	movs	r1, #24
 8000b70:	2028      	movs	r0, #40	; 0x28
 8000b72:	f000 fd67 	bl	8001644 <ssd1306_SetCursor>
	ret=ssd1306_WriteString("Francais", Font_6x8, White);
 8000b76:	4a1f      	ldr	r2, [pc, #124]	; (8000bf4 <Languaes_Screen_Function+0xac>)
 8000b78:	2301      	movs	r3, #1
 8000b7a:	ca06      	ldmia	r2, {r1, r2}
 8000b7c:	481e      	ldr	r0, [pc, #120]	; (8000bf8 <Languaes_Screen_Function+0xb0>)
 8000b7e:	f000 fd3b 	bl	80015f8 <ssd1306_WriteString>
 8000b82:	4603      	mov	r3, r0
 8000b84:	461a      	mov	r2, r3
 8000b86:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <Languaes_Screen_Function+0xa8>)
 8000b88:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(MIDDLE("Anglais"),line(3));
 8000b8a:	2120      	movs	r1, #32
 8000b8c:	202b      	movs	r0, #43	; 0x2b
 8000b8e:	f000 fd59 	bl	8001644 <ssd1306_SetCursor>
	ret=ssd1306_WriteString("Anglais", Font_6x8, White);
 8000b92:	4a18      	ldr	r2, [pc, #96]	; (8000bf4 <Languaes_Screen_Function+0xac>)
 8000b94:	2301      	movs	r3, #1
 8000b96:	ca06      	ldmia	r2, {r1, r2}
 8000b98:	4818      	ldr	r0, [pc, #96]	; (8000bfc <Languaes_Screen_Function+0xb4>)
 8000b9a:	f000 fd2d 	bl	80015f8 <ssd1306_WriteString>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <Languaes_Screen_Function+0xa8>)
 8000ba4:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(MIDDLE("Arabe"),line(4));
 8000ba6:	2128      	movs	r1, #40	; 0x28
 8000ba8:	2031      	movs	r0, #49	; 0x31
 8000baa:	f000 fd4b 	bl	8001644 <ssd1306_SetCursor>
	ret=ssd1306_WriteString("Arabe", Font_6x8, White);
 8000bae:	4a11      	ldr	r2, [pc, #68]	; (8000bf4 <Languaes_Screen_Function+0xac>)
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	ca06      	ldmia	r2, {r1, r2}
 8000bb4:	4812      	ldr	r0, [pc, #72]	; (8000c00 <Languaes_Screen_Function+0xb8>)
 8000bb6:	f000 fd1f 	bl	80015f8 <ssd1306_WriteString>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <Languaes_Screen_Function+0xa8>)
 8000bc0:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(MIDDLE("Allemand"),line(5));
 8000bc2:	2130      	movs	r1, #48	; 0x30
 8000bc4:	2028      	movs	r0, #40	; 0x28
 8000bc6:	f000 fd3d 	bl	8001644 <ssd1306_SetCursor>
	ret=ssd1306_WriteString("Allemand", Font_6x8, White);
 8000bca:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <Languaes_Screen_Function+0xac>)
 8000bcc:	2301      	movs	r3, #1
 8000bce:	ca06      	ldmia	r2, {r1, r2}
 8000bd0:	480c      	ldr	r0, [pc, #48]	; (8000c04 <Languaes_Screen_Function+0xbc>)
 8000bd2:	f000 fd11 	bl	80015f8 <ssd1306_WriteString>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <Languaes_Screen_Function+0xa8>)
 8000bdc:	701a      	strb	r2, [r3, #0]

	ssd1306_UpdateScreen();
 8000bde:	f000 fc07 	bl	80013f0 <ssd1306_UpdateScreen>
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000010 	.word	0x20000010
 8000bec:	08003a00 	.word	0x08003a00
 8000bf0:	20000090 	.word	0x20000090
 8000bf4:	20000008 	.word	0x20000008
 8000bf8:	08003b08 	.word	0x08003b08
 8000bfc:	08003b14 	.word	0x08003b14
 8000c00:	08003b1c 	.word	0x08003b1c
 8000c04:	08003b24 	.word	0x08003b24

08000c08 <Projects_Screen_Function>:
void Projects_Screen_Function(void){
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	f000 fbcb 	bl	80013a8 <ssd1306_Fill>
	//------------Title---------------//
	ssd1306_SetCursor(MIDDLE_TITLE("Projets"),0);
 8000c12:	2100      	movs	r1, #0
 8000c14:	2028      	movs	r0, #40	; 0x28
 8000c16:	f000 fd15 	bl	8001644 <ssd1306_SetCursor>
	ret=ssd1306_WriteString("Projets", Font_7x10, White);
 8000c1a:	4a31      	ldr	r2, [pc, #196]	; (8000ce0 <Projects_Screen_Function+0xd8>)
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	ca06      	ldmia	r2, {r1, r2}
 8000c20:	4830      	ldr	r0, [pc, #192]	; (8000ce4 <Projects_Screen_Function+0xdc>)
 8000c22:	f000 fce9 	bl	80015f8 <ssd1306_WriteString>
 8000c26:	4603      	mov	r3, r0
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4b2f      	ldr	r3, [pc, #188]	; (8000ce8 <Projects_Screen_Function+0xe0>)
 8000c2c:	701a      	strb	r2, [r3, #0]
	//------------body---------------//
	ssd1306_SetCursor(7,line(1));
 8000c2e:	2110      	movs	r1, #16
 8000c30:	2007      	movs	r0, #7
 8000c32:	f000 fd07 	bl	8001644 <ssd1306_SetCursor>
	ret=ssd1306_WriteString("EUROBOT", Font_6x8, White);
 8000c36:	4a2d      	ldr	r2, [pc, #180]	; (8000cec <Projects_Screen_Function+0xe4>)
 8000c38:	2301      	movs	r3, #1
 8000c3a:	ca06      	ldmia	r2, {r1, r2}
 8000c3c:	482c      	ldr	r0, [pc, #176]	; (8000cf0 <Projects_Screen_Function+0xe8>)
 8000c3e:	f000 fcdb 	bl	80015f8 <ssd1306_WriteString>
 8000c42:	4603      	mov	r3, r0
 8000c44:	461a      	mov	r2, r3
 8000c46:	4b28      	ldr	r3, [pc, #160]	; (8000ce8 <Projects_Screen_Function+0xe0>)
 8000c48:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(7,line(2));
 8000c4a:	2118      	movs	r1, #24
 8000c4c:	2007      	movs	r0, #7
 8000c4e:	f000 fcf9 	bl	8001644 <ssd1306_SetCursor>
	ret=ssd1306_WriteString("Systeme VTOL", Font_6x8, White);
 8000c52:	4a26      	ldr	r2, [pc, #152]	; (8000cec <Projects_Screen_Function+0xe4>)
 8000c54:	2301      	movs	r3, #1
 8000c56:	ca06      	ldmia	r2, {r1, r2}
 8000c58:	4826      	ldr	r0, [pc, #152]	; (8000cf4 <Projects_Screen_Function+0xec>)
 8000c5a:	f000 fccd 	bl	80015f8 <ssd1306_WriteString>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	461a      	mov	r2, r3
 8000c62:	4b21      	ldr	r3, [pc, #132]	; (8000ce8 <Projects_Screen_Function+0xe0>)
 8000c64:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(7,line(3));
 8000c66:	2120      	movs	r1, #32
 8000c68:	2007      	movs	r0, #7
 8000c6a:	f000 fceb 	bl	8001644 <ssd1306_SetCursor>
	ret=ssd1306_WriteString("Twizzy", Font_6x8, White);
 8000c6e:	4a1f      	ldr	r2, [pc, #124]	; (8000cec <Projects_Screen_Function+0xe4>)
 8000c70:	2301      	movs	r3, #1
 8000c72:	ca06      	ldmia	r2, {r1, r2}
 8000c74:	4820      	ldr	r0, [pc, #128]	; (8000cf8 <Projects_Screen_Function+0xf0>)
 8000c76:	f000 fcbf 	bl	80015f8 <ssd1306_WriteString>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ce8 <Projects_Screen_Function+0xe0>)
 8000c80:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(7,line(4));
 8000c82:	2128      	movs	r1, #40	; 0x28
 8000c84:	2007      	movs	r0, #7
 8000c86:	f000 fcdd 	bl	8001644 <ssd1306_SetCursor>
	ret=ssd1306_WriteString("Bras Robotique", Font_6x8, White);
 8000c8a:	4a18      	ldr	r2, [pc, #96]	; (8000cec <Projects_Screen_Function+0xe4>)
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	ca06      	ldmia	r2, {r1, r2}
 8000c90:	481a      	ldr	r0, [pc, #104]	; (8000cfc <Projects_Screen_Function+0xf4>)
 8000c92:	f000 fcb1 	bl	80015f8 <ssd1306_WriteString>
 8000c96:	4603      	mov	r3, r0
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <Projects_Screen_Function+0xe0>)
 8000c9c:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(7,line(5));
 8000c9e:	2130      	movs	r1, #48	; 0x30
 8000ca0:	2007      	movs	r0, #7
 8000ca2:	f000 fccf 	bl	8001644 <ssd1306_SetCursor>
	ret=ssd1306_WriteString("Not Zedla", Font_6x8, White);
 8000ca6:	4a11      	ldr	r2, [pc, #68]	; (8000cec <Projects_Screen_Function+0xe4>)
 8000ca8:	2301      	movs	r3, #1
 8000caa:	ca06      	ldmia	r2, {r1, r2}
 8000cac:	4814      	ldr	r0, [pc, #80]	; (8000d00 <Projects_Screen_Function+0xf8>)
 8000cae:	f000 fca3 	bl	80015f8 <ssd1306_WriteString>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <Projects_Screen_Function+0xe0>)
 8000cb8:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(7,line(6));
 8000cba:	2138      	movs	r1, #56	; 0x38
 8000cbc:	2007      	movs	r0, #7
 8000cbe:	f000 fcc1 	bl	8001644 <ssd1306_SetCursor>
	ret=ssd1306_WriteString("Ce projet :)", Font_6x8, White);
 8000cc2:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <Projects_Screen_Function+0xe4>)
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	ca06      	ldmia	r2, {r1, r2}
 8000cc8:	480e      	ldr	r0, [pc, #56]	; (8000d04 <Projects_Screen_Function+0xfc>)
 8000cca:	f000 fc95 	bl	80015f8 <ssd1306_WriteString>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <Projects_Screen_Function+0xe0>)
 8000cd4:	701a      	strb	r2, [r3, #0]

	ssd1306_UpdateScreen();
 8000cd6:	f000 fb8b 	bl	80013f0 <ssd1306_UpdateScreen>
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000010 	.word	0x20000010
 8000ce4:	08003a08 	.word	0x08003a08
 8000ce8:	20000090 	.word	0x20000090
 8000cec:	20000008 	.word	0x20000008
 8000cf0:	08003b30 	.word	0x08003b30
 8000cf4:	08003b38 	.word	0x08003b38
 8000cf8:	08003b48 	.word	0x08003b48
 8000cfc:	08003b50 	.word	0x08003b50
 8000d00:	08003b60 	.word	0x08003b60
 8000d04:	08003b6c 	.word	0x08003b6c

08000d08 <Diplomas_Screen_Function>:

void Diplomas_Screen_Function(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	f000 fb4b 	bl	80013a8 <ssd1306_Fill>
	//------------Title---------------//
	ssd1306_SetCursor(MIDDLE_TITLE("Formation"),0);
 8000d12:	2100      	movs	r1, #0
 8000d14:	2021      	movs	r0, #33	; 0x21
 8000d16:	f000 fc95 	bl	8001644 <ssd1306_SetCursor>
	ret=ssd1306_WriteString("Formation", Font_7x10, White);
 8000d1a:	4a31      	ldr	r2, [pc, #196]	; (8000de0 <Diplomas_Screen_Function+0xd8>)
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	ca06      	ldmia	r2, {r1, r2}
 8000d20:	4830      	ldr	r0, [pc, #192]	; (8000de4 <Diplomas_Screen_Function+0xdc>)
 8000d22:	f000 fc69 	bl	80015f8 <ssd1306_WriteString>
 8000d26:	4603      	mov	r3, r0
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4b2f      	ldr	r3, [pc, #188]	; (8000de8 <Diplomas_Screen_Function+0xe0>)
 8000d2c:	701a      	strb	r2, [r3, #0]
	//------------body---------------//
	ssd1306_SetCursor(MIDDLE("ENSEM Nancy: Ing."),line(1));
 8000d2e:	2110      	movs	r1, #16
 8000d30:	200d      	movs	r0, #13
 8000d32:	f000 fc87 	bl	8001644 <ssd1306_SetCursor>
	ret=ssd1306_WriteString("ENSEM Nancy: Ing.", Font_6x8, White);
 8000d36:	4a2d      	ldr	r2, [pc, #180]	; (8000dec <Diplomas_Screen_Function+0xe4>)
 8000d38:	2301      	movs	r3, #1
 8000d3a:	ca06      	ldmia	r2, {r1, r2}
 8000d3c:	482c      	ldr	r0, [pc, #176]	; (8000df0 <Diplomas_Screen_Function+0xe8>)
 8000d3e:	f000 fc5b 	bl	80015f8 <ssd1306_WriteString>
 8000d42:	4603      	mov	r3, r0
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b28      	ldr	r3, [pc, #160]	; (8000de8 <Diplomas_Screen_Function+0xe0>)
 8000d48:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(0,line(2));
 8000d4a:	2118      	movs	r1, #24
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	f000 fc79 	bl	8001644 <ssd1306_SetCursor>
	ret=ssd1306_WriteString("en Sys. Numeriques", Font_6x8, White);
 8000d52:	4a26      	ldr	r2, [pc, #152]	; (8000dec <Diplomas_Screen_Function+0xe4>)
 8000d54:	2301      	movs	r3, #1
 8000d56:	ca06      	ldmia	r2, {r1, r2}
 8000d58:	4826      	ldr	r0, [pc, #152]	; (8000df4 <Diplomas_Screen_Function+0xec>)
 8000d5a:	f000 fc4d 	bl	80015f8 <ssd1306_WriteString>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	461a      	mov	r2, r3
 8000d62:	4b21      	ldr	r3, [pc, #132]	; (8000de8 <Diplomas_Screen_Function+0xe0>)
 8000d64:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(MIDDLE("INSAT Tunis: Ing."),line(3));
 8000d66:	2120      	movs	r1, #32
 8000d68:	200d      	movs	r0, #13
 8000d6a:	f000 fc6b 	bl	8001644 <ssd1306_SetCursor>
	ret=ssd1306_WriteString("INSAT Tunis: Ing.", Font_6x8, White);
 8000d6e:	4a1f      	ldr	r2, [pc, #124]	; (8000dec <Diplomas_Screen_Function+0xe4>)
 8000d70:	2301      	movs	r3, #1
 8000d72:	ca06      	ldmia	r2, {r1, r2}
 8000d74:	4820      	ldr	r0, [pc, #128]	; (8000df8 <Diplomas_Screen_Function+0xf0>)
 8000d76:	f000 fc3f 	bl	80015f8 <ssd1306_WriteString>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4b1a      	ldr	r3, [pc, #104]	; (8000de8 <Diplomas_Screen_Function+0xe0>)
 8000d80:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(0,line(4));
 8000d82:	2128      	movs	r1, #40	; 0x28
 8000d84:	2000      	movs	r0, #0
 8000d86:	f000 fc5d 	bl	8001644 <ssd1306_SetCursor>
	ret=ssd1306_WriteString("Info Indus. & Auto", Font_6x8, White);
 8000d8a:	4a18      	ldr	r2, [pc, #96]	; (8000dec <Diplomas_Screen_Function+0xe4>)
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	ca06      	ldmia	r2, {r1, r2}
 8000d90:	481a      	ldr	r0, [pc, #104]	; (8000dfc <Diplomas_Screen_Function+0xf4>)
 8000d92:	f000 fc31 	bl	80015f8 <ssd1306_WriteString>
 8000d96:	4603      	mov	r3, r0
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4b13      	ldr	r3, [pc, #76]	; (8000de8 <Diplomas_Screen_Function+0xe0>)
 8000d9c:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(MIDDLE("INSAT Tunis: Prep."),line(5));
 8000d9e:	2130      	movs	r1, #48	; 0x30
 8000da0:	200a      	movs	r0, #10
 8000da2:	f000 fc4f 	bl	8001644 <ssd1306_SetCursor>
	ret=ssd1306_WriteString("INSAT Tunis: Prep.", Font_6x8, White);
 8000da6:	4a11      	ldr	r2, [pc, #68]	; (8000dec <Diplomas_Screen_Function+0xe4>)
 8000da8:	2301      	movs	r3, #1
 8000daa:	ca06      	ldmia	r2, {r1, r2}
 8000dac:	4814      	ldr	r0, [pc, #80]	; (8000e00 <Diplomas_Screen_Function+0xf8>)
 8000dae:	f000 fc23 	bl	80015f8 <ssd1306_WriteString>
 8000db2:	4603      	mov	r3, r0
 8000db4:	461a      	mov	r2, r3
 8000db6:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <Diplomas_Screen_Function+0xe0>)
 8000db8:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(0,line(6));
 8000dba:	2138      	movs	r1, #56	; 0x38
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	f000 fc41 	bl	8001644 <ssd1306_SetCursor>
	ret=ssd1306_WriteString("Math. Phy. Info.", Font_6x8, White);
 8000dc2:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <Diplomas_Screen_Function+0xe4>)
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	ca06      	ldmia	r2, {r1, r2}
 8000dc8:	480e      	ldr	r0, [pc, #56]	; (8000e04 <Diplomas_Screen_Function+0xfc>)
 8000dca:	f000 fc15 	bl	80015f8 <ssd1306_WriteString>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <Diplomas_Screen_Function+0xe0>)
 8000dd4:	701a      	strb	r2, [r3, #0]

	ssd1306_UpdateScreen();
 8000dd6:	f000 fb0b 	bl	80013f0 <ssd1306_UpdateScreen>
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000010 	.word	0x20000010
 8000de4:	08003a10 	.word	0x08003a10
 8000de8:	20000090 	.word	0x20000090
 8000dec:	20000008 	.word	0x20000008
 8000df0:	08003b7c 	.word	0x08003b7c
 8000df4:	08003b90 	.word	0x08003b90
 8000df8:	08003ba4 	.word	0x08003ba4
 8000dfc:	08003bb8 	.word	0x08003bb8
 8000e00:	08003bcc 	.word	0x08003bcc
 8000e04:	08003be0 	.word	0x08003be0

08000e08 <ProfessionalExperience_Screen_Function>:
void ProfessionalExperience_Screen_Function(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f000 facb 	bl	80013a8 <ssd1306_Fill>
	//------------Title---------------//
	ssd1306_SetCursor(MIDDLE_TITLE("Experience Pro."),0);
 8000e12:	2100      	movs	r1, #0
 8000e14:	200c      	movs	r0, #12
 8000e16:	f000 fc15 	bl	8001644 <ssd1306_SetCursor>
	ret=ssd1306_WriteString("Experience Pro.", Font_7x10, White);
 8000e1a:	4a46      	ldr	r2, [pc, #280]	; (8000f34 <ProfessionalExperience_Screen_Function+0x12c>)
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	ca06      	ldmia	r2, {r1, r2}
 8000e20:	4845      	ldr	r0, [pc, #276]	; (8000f38 <ProfessionalExperience_Screen_Function+0x130>)
 8000e22:	f000 fbe9 	bl	80015f8 <ssd1306_WriteString>
 8000e26:	4603      	mov	r3, r0
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b44      	ldr	r3, [pc, #272]	; (8000f3c <ProfessionalExperience_Screen_Function+0x134>)
 8000e2c:	701a      	strb	r2, [r3, #0]
	//------------body---------------//
	ssd1306_SetCursor(MIDDLE("STAGE EN GS2I"),line(1));
 8000e2e:	2110      	movs	r1, #16
 8000e30:	2019      	movs	r0, #25
 8000e32:	f000 fc07 	bl	8001644 <ssd1306_SetCursor>
	ret=ssd1306_WriteString("STAGE EN GS2I", Font_6x8, White);
 8000e36:	4a42      	ldr	r2, [pc, #264]	; (8000f40 <ProfessionalExperience_Screen_Function+0x138>)
 8000e38:	2301      	movs	r3, #1
 8000e3a:	ca06      	ldmia	r2, {r1, r2}
 8000e3c:	4841      	ldr	r0, [pc, #260]	; (8000f44 <ProfessionalExperience_Screen_Function+0x13c>)
 8000e3e:	f000 fbdb 	bl	80015f8 <ssd1306_WriteString>
 8000e42:	4603      	mov	r3, r0
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b3d      	ldr	r3, [pc, #244]	; (8000f3c <ProfessionalExperience_Screen_Function+0x134>)
 8000e48:	701a      	strb	r2, [r3, #0]

	PRINT2(2,"S7-1200","Modbus");
 8000e4a:	2118      	movs	r1, #24
 8000e4c:	2005      	movs	r0, #5
 8000e4e:	f000 fbf9 	bl	8001644 <ssd1306_SetCursor>
 8000e52:	4a3b      	ldr	r2, [pc, #236]	; (8000f40 <ProfessionalExperience_Screen_Function+0x138>)
 8000e54:	2301      	movs	r3, #1
 8000e56:	ca06      	ldmia	r2, {r1, r2}
 8000e58:	483b      	ldr	r0, [pc, #236]	; (8000f48 <ProfessionalExperience_Screen_Function+0x140>)
 8000e5a:	f000 fbcd 	bl	80015f8 <ssd1306_WriteString>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	461a      	mov	r2, r3
 8000e62:	4b36      	ldr	r3, [pc, #216]	; (8000f3c <ProfessionalExperience_Screen_Function+0x134>)
 8000e64:	701a      	strb	r2, [r3, #0]
 8000e66:	2118      	movs	r1, #24
 8000e68:	2057      	movs	r0, #87	; 0x57
 8000e6a:	f000 fbeb 	bl	8001644 <ssd1306_SetCursor>
 8000e6e:	4a34      	ldr	r2, [pc, #208]	; (8000f40 <ProfessionalExperience_Screen_Function+0x138>)
 8000e70:	2301      	movs	r3, #1
 8000e72:	ca06      	ldmia	r2, {r1, r2}
 8000e74:	4835      	ldr	r0, [pc, #212]	; (8000f4c <ProfessionalExperience_Screen_Function+0x144>)
 8000e76:	f000 fbbf 	bl	80015f8 <ssd1306_WriteString>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4b2f      	ldr	r3, [pc, #188]	; (8000f3c <ProfessionalExperience_Screen_Function+0x134>)
 8000e80:	701a      	strb	r2, [r3, #0]

	PRINT2(3,"TIA Portal","Python");
 8000e82:	2120      	movs	r1, #32
 8000e84:	2005      	movs	r0, #5
 8000e86:	f000 fbdd 	bl	8001644 <ssd1306_SetCursor>
 8000e8a:	4a2d      	ldr	r2, [pc, #180]	; (8000f40 <ProfessionalExperience_Screen_Function+0x138>)
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	ca06      	ldmia	r2, {r1, r2}
 8000e90:	482f      	ldr	r0, [pc, #188]	; (8000f50 <ProfessionalExperience_Screen_Function+0x148>)
 8000e92:	f000 fbb1 	bl	80015f8 <ssd1306_WriteString>
 8000e96:	4603      	mov	r3, r0
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4b28      	ldr	r3, [pc, #160]	; (8000f3c <ProfessionalExperience_Screen_Function+0x134>)
 8000e9c:	701a      	strb	r2, [r3, #0]
 8000e9e:	2120      	movs	r1, #32
 8000ea0:	2057      	movs	r0, #87	; 0x57
 8000ea2:	f000 fbcf 	bl	8001644 <ssd1306_SetCursor>
 8000ea6:	4a26      	ldr	r2, [pc, #152]	; (8000f40 <ProfessionalExperience_Screen_Function+0x138>)
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	ca06      	ldmia	r2, {r1, r2}
 8000eac:	4829      	ldr	r0, [pc, #164]	; (8000f54 <ProfessionalExperience_Screen_Function+0x14c>)
 8000eae:	f000 fba3 	bl	80015f8 <ssd1306_WriteString>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b21      	ldr	r3, [pc, #132]	; (8000f3c <ProfessionalExperience_Screen_Function+0x134>)
 8000eb8:	701a      	strb	r2, [r3, #0]

	ssd1306_SetCursor(MIDDLE("RaspberyPi"),line(4));
 8000eba:	2128      	movs	r1, #40	; 0x28
 8000ebc:	2022      	movs	r0, #34	; 0x22
 8000ebe:	f000 fbc1 	bl	8001644 <ssd1306_SetCursor>
	ret=ssd1306_WriteString("RaspberyPi", Font_6x8, White);
 8000ec2:	4a1f      	ldr	r2, [pc, #124]	; (8000f40 <ProfessionalExperience_Screen_Function+0x138>)
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	ca06      	ldmia	r2, {r1, r2}
 8000ec8:	4823      	ldr	r0, [pc, #140]	; (8000f58 <ProfessionalExperience_Screen_Function+0x150>)
 8000eca:	f000 fb95 	bl	80015f8 <ssd1306_WriteString>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4b1a      	ldr	r3, [pc, #104]	; (8000f3c <ProfessionalExperience_Screen_Function+0x134>)
 8000ed4:	701a      	strb	r2, [r3, #0]

	ssd1306_SetCursor(MIDDLE("STAGE EN SGEA"),line(5));
 8000ed6:	2130      	movs	r1, #48	; 0x30
 8000ed8:	2019      	movs	r0, #25
 8000eda:	f000 fbb3 	bl	8001644 <ssd1306_SetCursor>
	ret=ssd1306_WriteString("STAGE EN SGEA", Font_6x8, White);
 8000ede:	4a18      	ldr	r2, [pc, #96]	; (8000f40 <ProfessionalExperience_Screen_Function+0x138>)
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	ca06      	ldmia	r2, {r1, r2}
 8000ee4:	481d      	ldr	r0, [pc, #116]	; (8000f5c <ProfessionalExperience_Screen_Function+0x154>)
 8000ee6:	f000 fb87 	bl	80015f8 <ssd1306_WriteString>
 8000eea:	4603      	mov	r3, r0
 8000eec:	461a      	mov	r2, r3
 8000eee:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <ProfessionalExperience_Screen_Function+0x134>)
 8000ef0:	701a      	strb	r2, [r3, #0]

	PRINT2(6,"Automate","Indus."); // To fix
 8000ef2:	2138      	movs	r1, #56	; 0x38
 8000ef4:	2005      	movs	r0, #5
 8000ef6:	f000 fba5 	bl	8001644 <ssd1306_SetCursor>
 8000efa:	4a11      	ldr	r2, [pc, #68]	; (8000f40 <ProfessionalExperience_Screen_Function+0x138>)
 8000efc:	2301      	movs	r3, #1
 8000efe:	ca06      	ldmia	r2, {r1, r2}
 8000f00:	4817      	ldr	r0, [pc, #92]	; (8000f60 <ProfessionalExperience_Screen_Function+0x158>)
 8000f02:	f000 fb79 	bl	80015f8 <ssd1306_WriteString>
 8000f06:	4603      	mov	r3, r0
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <ProfessionalExperience_Screen_Function+0x134>)
 8000f0c:	701a      	strb	r2, [r3, #0]
 8000f0e:	2138      	movs	r1, #56	; 0x38
 8000f10:	2057      	movs	r0, #87	; 0x57
 8000f12:	f000 fb97 	bl	8001644 <ssd1306_SetCursor>
 8000f16:	4a0a      	ldr	r2, [pc, #40]	; (8000f40 <ProfessionalExperience_Screen_Function+0x138>)
 8000f18:	2301      	movs	r3, #1
 8000f1a:	ca06      	ldmia	r2, {r1, r2}
 8000f1c:	4811      	ldr	r0, [pc, #68]	; (8000f64 <ProfessionalExperience_Screen_Function+0x15c>)
 8000f1e:	f000 fb6b 	bl	80015f8 <ssd1306_WriteString>
 8000f22:	4603      	mov	r3, r0
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <ProfessionalExperience_Screen_Function+0x134>)
 8000f28:	701a      	strb	r2, [r3, #0]

	ssd1306_UpdateScreen();
 8000f2a:	f000 fa61 	bl	80013f0 <ssd1306_UpdateScreen>
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000010 	.word	0x20000010
 8000f38:	08003a1c 	.word	0x08003a1c
 8000f3c:	20000090 	.word	0x20000090
 8000f40:	20000008 	.word	0x20000008
 8000f44:	08003bf4 	.word	0x08003bf4
 8000f48:	08003c04 	.word	0x08003c04
 8000f4c:	08003c0c 	.word	0x08003c0c
 8000f50:	08003c14 	.word	0x08003c14
 8000f54:	08003abc 	.word	0x08003abc
 8000f58:	08003c20 	.word	0x08003c20
 8000f5c:	08003c2c 	.word	0x08003c2c
 8000f60:	08003c3c 	.word	0x08003c3c
 8000f64:	08003c48 	.word	0x08003c48

08000f68 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	80fb      	strh	r3, [r7, #6]
	if (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_7) == GPIO_PIN_RESET)
 8000f72:	2180      	movs	r1, #128	; 0x80
 8000f74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f78:	f000 fec2 	bl	8001d00 <HAL_GPIO_ReadPin>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d10c      	bne.n	8000f9c <HAL_GPIO_EXTI_Callback+0x34>
		Current_State=(Current_State+1)%Number_of_states;
 8000f82:	4b36      	ldr	r3, [pc, #216]	; (800105c <HAL_GPIO_EXTI_Callback+0xf4>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	3301      	adds	r3, #1
 8000f88:	4a35      	ldr	r2, [pc, #212]	; (8001060 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000f8a:	7812      	ldrb	r2, [r2, #0]
 8000f8c:	fb93 f1f2 	sdiv	r1, r3, r2
 8000f90:	fb01 f202 	mul.w	r2, r1, r2
 8000f94:	1a9b      	subs	r3, r3, r2
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	4b30      	ldr	r3, [pc, #192]	; (800105c <HAL_GPIO_EXTI_Callback+0xf4>)
 8000f9a:	701a      	strb	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4) == GPIO_PIN_RESET)
 8000f9c:	2110      	movs	r1, #16
 8000f9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa2:	f000 fead 	bl	8001d00 <HAL_GPIO_ReadPin>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d102      	bne.n	8000fb2 <HAL_GPIO_EXTI_Callback+0x4a>
		Current_State=Main_Screen;
 8000fac:	4b2b      	ldr	r3, [pc, #172]	; (800105c <HAL_GPIO_EXTI_Callback+0xf4>)
 8000fae:	2202      	movs	r2, #2
 8000fb0:	701a      	strb	r2, [r3, #0]
	if ((Current_State== Main_Screen) && (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_5)) == GPIO_PIN_RESET)
 8000fb2:	4b2a      	ldr	r3, [pc, #168]	; (800105c <HAL_GPIO_EXTI_Callback+0xf4>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d11b      	bne.n	8000ff2 <HAL_GPIO_EXTI_Callback+0x8a>
 8000fba:	2120      	movs	r1, #32
 8000fbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc0:	f000 fe9e 	bl	8001d00 <HAL_GPIO_ReadPin>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d113      	bne.n	8000ff2 <HAL_GPIO_EXTI_Callback+0x8a>
		Choice=1+((Choice)%6);
 8000fca:	4b26      	ldr	r3, [pc, #152]	; (8001064 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000fcc:	f993 2000 	ldrsb.w	r2, [r3]
 8000fd0:	4b25      	ldr	r3, [pc, #148]	; (8001068 <HAL_GPIO_EXTI_Callback+0x100>)
 8000fd2:	fb83 3102 	smull	r3, r1, r3, r2
 8000fd6:	17d3      	asrs	r3, r2, #31
 8000fd8:	1ac9      	subs	r1, r1, r3
 8000fda:	460b      	mov	r3, r1
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	440b      	add	r3, r1
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	b25b      	sxtb	r3, r3
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	3301      	adds	r3, #1
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	b25a      	sxtb	r2, r3
 8000fee:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000ff0:	701a      	strb	r2, [r3, #0]
	if ((Current_State== Main_Screen) && (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_6)) == GPIO_PIN_RESET)
 8000ff2:	4b1a      	ldr	r3, [pc, #104]	; (800105c <HAL_GPIO_EXTI_Callback+0xf4>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d11b      	bne.n	8001032 <HAL_GPIO_EXTI_Callback+0xca>
 8000ffa:	2140      	movs	r1, #64	; 0x40
 8000ffc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001000:	f000 fe7e 	bl	8001d00 <HAL_GPIO_ReadPin>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d113      	bne.n	8001032 <HAL_GPIO_EXTI_Callback+0xca>
		Choice=1+(4+Choice)%6;
 800100a:	4b16      	ldr	r3, [pc, #88]	; (8001064 <HAL_GPIO_EXTI_Callback+0xfc>)
 800100c:	f993 3000 	ldrsb.w	r3, [r3]
 8001010:	1d1a      	adds	r2, r3, #4
 8001012:	4b15      	ldr	r3, [pc, #84]	; (8001068 <HAL_GPIO_EXTI_Callback+0x100>)
 8001014:	fb83 3102 	smull	r3, r1, r3, r2
 8001018:	17d3      	asrs	r3, r2, #31
 800101a:	1ac9      	subs	r1, r1, r3
 800101c:	460b      	mov	r3, r1
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	440b      	add	r3, r1
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	1ad1      	subs	r1, r2, r3
 8001026:	b2cb      	uxtb	r3, r1
 8001028:	3301      	adds	r3, #1
 800102a:	b2db      	uxtb	r3, r3
 800102c:	b25a      	sxtb	r2, r3
 800102e:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001030:	701a      	strb	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_7) == GPIO_PIN_RESET)
 8001032:	2180      	movs	r1, #128	; 0x80
 8001034:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001038:	f000 fe62 	bl	8001d00 <HAL_GPIO_ReadPin>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d107      	bne.n	8001052 <HAL_GPIO_EXTI_Callback+0xea>
		Current_State=(Choice)+Main_Screen;
 8001042:	4b08      	ldr	r3, [pc, #32]	; (8001064 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001044:	f993 3000 	ldrsb.w	r3, [r3]
 8001048:	b2db      	uxtb	r3, r3
 800104a:	3302      	adds	r3, #2
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4b03      	ldr	r3, [pc, #12]	; (800105c <HAL_GPIO_EXTI_Callback+0xf4>)
 8001050:	701a      	strb	r2, [r3, #0]

}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000091 	.word	0x20000091
 8001060:	20000092 	.word	0x20000092
 8001064:	20000000 	.word	0x20000000
 8001068:	2aaaaaab 	.word	0x2aaaaaab

0800106c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001070:	b672      	cpsid	i
}
 8001072:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001074:	e7fe      	b.n	8001074 <Error_Handler+0x8>
	...

08001078 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107e:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <HAL_MspInit+0x44>)
 8001080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001082:	4a0e      	ldr	r2, [pc, #56]	; (80010bc <HAL_MspInit+0x44>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	6613      	str	r3, [r2, #96]	; 0x60
 800108a:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <HAL_MspInit+0x44>)
 800108c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <HAL_MspInit+0x44>)
 8001098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109a:	4a08      	ldr	r2, [pc, #32]	; (80010bc <HAL_MspInit+0x44>)
 800109c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a0:	6593      	str	r3, [r2, #88]	; 0x58
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_MspInit+0x44>)
 80010a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010aa:	603b      	str	r3, [r7, #0]
 80010ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	40021000 	.word	0x40021000

080010c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b09e      	sub	sp, #120	; 0x78
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010d8:	f107 0310 	add.w	r3, r7, #16
 80010dc:	2254      	movs	r2, #84	; 0x54
 80010de:	2100      	movs	r1, #0
 80010e0:	4618      	mov	r0, r3
 80010e2:	f002 fc3b 	bl	800395c <memset>
  if(hi2c->Instance==I2C1)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a1f      	ldr	r2, [pc, #124]	; (8001168 <HAL_I2C_MspInit+0xa8>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d137      	bne.n	8001160 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010f0:	2340      	movs	r3, #64	; 0x40
 80010f2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80010f4:	2300      	movs	r3, #0
 80010f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010f8:	f107 0310 	add.w	r3, r7, #16
 80010fc:	4618      	mov	r0, r3
 80010fe:	f002 f921 	bl	8003344 <HAL_RCCEx_PeriphCLKConfig>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001108:	f7ff ffb0 	bl	800106c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110c:	4b17      	ldr	r3, [pc, #92]	; (800116c <HAL_I2C_MspInit+0xac>)
 800110e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001110:	4a16      	ldr	r2, [pc, #88]	; (800116c <HAL_I2C_MspInit+0xac>)
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001118:	4b14      	ldr	r3, [pc, #80]	; (800116c <HAL_I2C_MspInit+0xac>)
 800111a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001124:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001128:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800112a:	2312      	movs	r3, #18
 800112c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001132:	2303      	movs	r3, #3
 8001134:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001136:	2304      	movs	r3, #4
 8001138:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800113e:	4619      	mov	r1, r3
 8001140:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001144:	f000 fc72 	bl	8001a2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001148:	4b08      	ldr	r3, [pc, #32]	; (800116c <HAL_I2C_MspInit+0xac>)
 800114a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114c:	4a07      	ldr	r2, [pc, #28]	; (800116c <HAL_I2C_MspInit+0xac>)
 800114e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001152:	6593      	str	r3, [r2, #88]	; 0x58
 8001154:	4b05      	ldr	r3, [pc, #20]	; (800116c <HAL_I2C_MspInit+0xac>)
 8001156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001158:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001160:	bf00      	nop
 8001162:	3778      	adds	r7, #120	; 0x78
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40005400 	.word	0x40005400
 800116c:	40021000 	.word	0x40021000

08001170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <NMI_Handler+0x4>

08001176 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800117a:	e7fe      	b.n	800117a <HardFault_Handler+0x4>

0800117c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <MemManage_Handler+0x4>

08001182 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001186:	e7fe      	b.n	8001186 <BusFault_Handler+0x4>

08001188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800118c:	e7fe      	b.n	800118c <UsageFault_Handler+0x4>

0800118e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011bc:	f000 fae0 	bl	8001780 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80011c8:	2010      	movs	r0, #16
 80011ca:	f000 fdb1 	bl	8001d30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80011d6:	2020      	movs	r0, #32
 80011d8:	f000 fdaa 	bl	8001d30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80011dc:	2040      	movs	r0, #64	; 0x40
 80011de:	f000 fda7 	bl	8001d30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80011e2:	2080      	movs	r0, #128	; 0x80
 80011e4:	f000 fda4 	bl	8001d30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}

080011ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <SystemInit+0x20>)
 80011f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011f6:	4a05      	ldr	r2, [pc, #20]	; (800120c <SystemInit+0x20>)
 80011f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001210:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001248 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001214:	f7ff ffea 	bl	80011ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001218:	480c      	ldr	r0, [pc, #48]	; (800124c <LoopForever+0x6>)
  ldr r1, =_edata
 800121a:	490d      	ldr	r1, [pc, #52]	; (8001250 <LoopForever+0xa>)
  ldr r2, =_sidata
 800121c:	4a0d      	ldr	r2, [pc, #52]	; (8001254 <LoopForever+0xe>)
  movs r3, #0
 800121e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001220:	e002      	b.n	8001228 <LoopCopyDataInit>

08001222 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001222:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001224:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001226:	3304      	adds	r3, #4

08001228 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001228:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800122a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800122c:	d3f9      	bcc.n	8001222 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800122e:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001230:	4c0a      	ldr	r4, [pc, #40]	; (800125c <LoopForever+0x16>)
  movs r3, #0
 8001232:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001234:	e001      	b.n	800123a <LoopFillZerobss>

08001236 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001236:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001238:	3204      	adds	r2, #4

0800123a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800123a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800123c:	d3fb      	bcc.n	8001236 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800123e:	f002 fb69 	bl	8003914 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001242:	f7fe ffc3 	bl	80001cc <main>

08001246 <LoopForever>:

LoopForever:
    b LoopForever
 8001246:	e7fe      	b.n	8001246 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001248:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800124c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001250:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001254:	080049f4 	.word	0x080049f4
  ldr r2, =_sbss
 8001258:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 800125c:	200004a0 	.word	0x200004a0

08001260 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001260:	e7fe      	b.n	8001260 <ADC1_IRQHandler>

08001262 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af04      	add	r7, sp, #16
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800127a:	f04f 33ff 	mov.w	r3, #4294967295
 800127e:	9302      	str	r3, [sp, #8]
 8001280:	2301      	movs	r3, #1
 8001282:	9301      	str	r3, [sp, #4]
 8001284:	1dfb      	adds	r3, r7, #7
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	2301      	movs	r3, #1
 800128a:	2200      	movs	r2, #0
 800128c:	2178      	movs	r1, #120	; 0x78
 800128e:	4803      	ldr	r0, [pc, #12]	; (800129c <ssd1306_WriteCommand+0x2c>)
 8001290:	f000 fdf6 	bl	8001e80 <HAL_I2C_Mem_Write>
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	2000003c 	.word	0x2000003c

080012a0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af04      	add	r7, sp, #16
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	f04f 32ff 	mov.w	r2, #4294967295
 80012b2:	9202      	str	r2, [sp, #8]
 80012b4:	9301      	str	r3, [sp, #4]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	2301      	movs	r3, #1
 80012bc:	2240      	movs	r2, #64	; 0x40
 80012be:	2178      	movs	r1, #120	; 0x78
 80012c0:	4803      	ldr	r0, [pc, #12]	; (80012d0 <ssd1306_WriteData+0x30>)
 80012c2:	f000 fddd 	bl	8001e80 <HAL_I2C_Mem_Write>
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	2000003c 	.word	0x2000003c

080012d4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80012d8:	f7ff ffc3 	bl	8001262 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80012dc:	2064      	movs	r0, #100	; 0x64
 80012de:	f000 fa6f 	bl	80017c0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80012e2:	2000      	movs	r0, #0
 80012e4:	f000 f9da 	bl	800169c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80012e8:	2020      	movs	r0, #32
 80012ea:	f7ff ffc1 	bl	8001270 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80012ee:	2000      	movs	r0, #0
 80012f0:	f7ff ffbe 	bl	8001270 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80012f4:	20b0      	movs	r0, #176	; 0xb0
 80012f6:	f7ff ffbb 	bl	8001270 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80012fa:	20c8      	movs	r0, #200	; 0xc8
 80012fc:	f7ff ffb8 	bl	8001270 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001300:	2000      	movs	r0, #0
 8001302:	f7ff ffb5 	bl	8001270 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001306:	2010      	movs	r0, #16
 8001308:	f7ff ffb2 	bl	8001270 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800130c:	2040      	movs	r0, #64	; 0x40
 800130e:	f7ff ffaf 	bl	8001270 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001312:	20ff      	movs	r0, #255	; 0xff
 8001314:	f000 f9ae 	bl	8001674 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001318:	20a1      	movs	r0, #161	; 0xa1
 800131a:	f7ff ffa9 	bl	8001270 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800131e:	20a6      	movs	r0, #166	; 0xa6
 8001320:	f7ff ffa6 	bl	8001270 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001324:	20a8      	movs	r0, #168	; 0xa8
 8001326:	f7ff ffa3 	bl	8001270 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800132a:	203f      	movs	r0, #63	; 0x3f
 800132c:	f7ff ffa0 	bl	8001270 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001330:	20a4      	movs	r0, #164	; 0xa4
 8001332:	f7ff ff9d 	bl	8001270 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001336:	20d3      	movs	r0, #211	; 0xd3
 8001338:	f7ff ff9a 	bl	8001270 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800133c:	2000      	movs	r0, #0
 800133e:	f7ff ff97 	bl	8001270 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001342:	20d5      	movs	r0, #213	; 0xd5
 8001344:	f7ff ff94 	bl	8001270 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001348:	20f0      	movs	r0, #240	; 0xf0
 800134a:	f7ff ff91 	bl	8001270 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800134e:	20d9      	movs	r0, #217	; 0xd9
 8001350:	f7ff ff8e 	bl	8001270 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001354:	2022      	movs	r0, #34	; 0x22
 8001356:	f7ff ff8b 	bl	8001270 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800135a:	20da      	movs	r0, #218	; 0xda
 800135c:	f7ff ff88 	bl	8001270 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001360:	2012      	movs	r0, #18
 8001362:	f7ff ff85 	bl	8001270 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001366:	20db      	movs	r0, #219	; 0xdb
 8001368:	f7ff ff82 	bl	8001270 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800136c:	2020      	movs	r0, #32
 800136e:	f7ff ff7f 	bl	8001270 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001372:	208d      	movs	r0, #141	; 0x8d
 8001374:	f7ff ff7c 	bl	8001270 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001378:	2014      	movs	r0, #20
 800137a:	f7ff ff79 	bl	8001270 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800137e:	2001      	movs	r0, #1
 8001380:	f000 f98c 	bl	800169c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001384:	2000      	movs	r0, #0
 8001386:	f000 f80f 	bl	80013a8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800138a:	f000 f831 	bl	80013f0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800138e:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <ssd1306_Init+0xd0>)
 8001390:	2200      	movs	r2, #0
 8001392:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001394:	4b03      	ldr	r3, [pc, #12]	; (80013a4 <ssd1306_Init+0xd0>)
 8001396:	2200      	movs	r2, #0
 8001398:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800139a:	4b02      	ldr	r3, [pc, #8]	; (80013a4 <ssd1306_Init+0xd0>)
 800139c:	2201      	movs	r2, #1
 800139e:	711a      	strb	r2, [r3, #4]
}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000494 	.word	0x20000494

080013a8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	e00d      	b.n	80013d4 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <ssd1306_Fill+0x1a>
 80013be:	2100      	movs	r1, #0
 80013c0:	e000      	b.n	80013c4 <ssd1306_Fill+0x1c>
 80013c2:	21ff      	movs	r1, #255	; 0xff
 80013c4:	4a09      	ldr	r2, [pc, #36]	; (80013ec <ssd1306_Fill+0x44>)
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	4413      	add	r3, r2
 80013ca:	460a      	mov	r2, r1
 80013cc:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	3301      	adds	r3, #1
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013da:	d3ed      	bcc.n	80013b8 <ssd1306_Fill+0x10>
    }
}
 80013dc:	bf00      	nop
 80013de:	bf00      	nop
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	20000094 	.word	0x20000094

080013f0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80013f6:	2300      	movs	r3, #0
 80013f8:	71fb      	strb	r3, [r7, #7]
 80013fa:	e016      	b.n	800142a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	3b50      	subs	r3, #80	; 0x50
 8001400:	b2db      	uxtb	r3, r3
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff ff34 	bl	8001270 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001408:	2000      	movs	r0, #0
 800140a:	f7ff ff31 	bl	8001270 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800140e:	2010      	movs	r0, #16
 8001410:	f7ff ff2e 	bl	8001270 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	01db      	lsls	r3, r3, #7
 8001418:	4a08      	ldr	r2, [pc, #32]	; (800143c <ssd1306_UpdateScreen+0x4c>)
 800141a:	4413      	add	r3, r2
 800141c:	2180      	movs	r1, #128	; 0x80
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff ff3e 	bl	80012a0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	3301      	adds	r3, #1
 8001428:	71fb      	strb	r3, [r7, #7]
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	2b07      	cmp	r3, #7
 800142e:	d9e5      	bls.n	80013fc <ssd1306_UpdateScreen+0xc>
    }
}
 8001430:	bf00      	nop
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000094 	.word	0x20000094

08001440 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	71fb      	strb	r3, [r7, #7]
 800144a:	460b      	mov	r3, r1
 800144c:	71bb      	strb	r3, [r7, #6]
 800144e:	4613      	mov	r3, r2
 8001450:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	2b00      	cmp	r3, #0
 8001458:	db3d      	blt.n	80014d6 <ssd1306_DrawPixel+0x96>
 800145a:	79bb      	ldrb	r3, [r7, #6]
 800145c:	2b3f      	cmp	r3, #63	; 0x3f
 800145e:	d83a      	bhi.n	80014d6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001460:	797b      	ldrb	r3, [r7, #5]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d11a      	bne.n	800149c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001466:	79fa      	ldrb	r2, [r7, #7]
 8001468:	79bb      	ldrb	r3, [r7, #6]
 800146a:	08db      	lsrs	r3, r3, #3
 800146c:	b2d8      	uxtb	r0, r3
 800146e:	4603      	mov	r3, r0
 8001470:	01db      	lsls	r3, r3, #7
 8001472:	4413      	add	r3, r2
 8001474:	4a1b      	ldr	r2, [pc, #108]	; (80014e4 <ssd1306_DrawPixel+0xa4>)
 8001476:	5cd3      	ldrb	r3, [r2, r3]
 8001478:	b25a      	sxtb	r2, r3
 800147a:	79bb      	ldrb	r3, [r7, #6]
 800147c:	f003 0307 	and.w	r3, r3, #7
 8001480:	2101      	movs	r1, #1
 8001482:	fa01 f303 	lsl.w	r3, r1, r3
 8001486:	b25b      	sxtb	r3, r3
 8001488:	4313      	orrs	r3, r2
 800148a:	b259      	sxtb	r1, r3
 800148c:	79fa      	ldrb	r2, [r7, #7]
 800148e:	4603      	mov	r3, r0
 8001490:	01db      	lsls	r3, r3, #7
 8001492:	4413      	add	r3, r2
 8001494:	b2c9      	uxtb	r1, r1
 8001496:	4a13      	ldr	r2, [pc, #76]	; (80014e4 <ssd1306_DrawPixel+0xa4>)
 8001498:	54d1      	strb	r1, [r2, r3]
 800149a:	e01d      	b.n	80014d8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800149c:	79fa      	ldrb	r2, [r7, #7]
 800149e:	79bb      	ldrb	r3, [r7, #6]
 80014a0:	08db      	lsrs	r3, r3, #3
 80014a2:	b2d8      	uxtb	r0, r3
 80014a4:	4603      	mov	r3, r0
 80014a6:	01db      	lsls	r3, r3, #7
 80014a8:	4413      	add	r3, r2
 80014aa:	4a0e      	ldr	r2, [pc, #56]	; (80014e4 <ssd1306_DrawPixel+0xa4>)
 80014ac:	5cd3      	ldrb	r3, [r2, r3]
 80014ae:	b25a      	sxtb	r2, r3
 80014b0:	79bb      	ldrb	r3, [r7, #6]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	2101      	movs	r1, #1
 80014b8:	fa01 f303 	lsl.w	r3, r1, r3
 80014bc:	b25b      	sxtb	r3, r3
 80014be:	43db      	mvns	r3, r3
 80014c0:	b25b      	sxtb	r3, r3
 80014c2:	4013      	ands	r3, r2
 80014c4:	b259      	sxtb	r1, r3
 80014c6:	79fa      	ldrb	r2, [r7, #7]
 80014c8:	4603      	mov	r3, r0
 80014ca:	01db      	lsls	r3, r3, #7
 80014cc:	4413      	add	r3, r2
 80014ce:	b2c9      	uxtb	r1, r1
 80014d0:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <ssd1306_DrawPixel+0xa4>)
 80014d2:	54d1      	strb	r1, [r2, r3]
 80014d4:	e000      	b.n	80014d8 <ssd1306_DrawPixel+0x98>
        return;
 80014d6:	bf00      	nop
    }
}
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	20000094 	.word	0x20000094

080014e8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80014e8:	b590      	push	{r4, r7, lr}
 80014ea:	b089      	sub	sp, #36	; 0x24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4604      	mov	r4, r0
 80014f0:	1d38      	adds	r0, r7, #4
 80014f2:	e880 0006 	stmia.w	r0, {r1, r2}
 80014f6:	461a      	mov	r2, r3
 80014f8:	4623      	mov	r3, r4
 80014fa:	73fb      	strb	r3, [r7, #15]
 80014fc:	4613      	mov	r3, r2
 80014fe:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	2b1f      	cmp	r3, #31
 8001504:	d902      	bls.n	800150c <ssd1306_WriteChar+0x24>
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	2b7e      	cmp	r3, #126	; 0x7e
 800150a:	d901      	bls.n	8001510 <ssd1306_WriteChar+0x28>
        return 0;
 800150c:	2300      	movs	r3, #0
 800150e:	e06d      	b.n	80015ec <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001510:	4b38      	ldr	r3, [pc, #224]	; (80015f4 <ssd1306_WriteChar+0x10c>)
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	461a      	mov	r2, r3
 8001516:	793b      	ldrb	r3, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	2b80      	cmp	r3, #128	; 0x80
 800151c:	dc06      	bgt.n	800152c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800151e:	4b35      	ldr	r3, [pc, #212]	; (80015f4 <ssd1306_WriteChar+0x10c>)
 8001520:	885b      	ldrh	r3, [r3, #2]
 8001522:	461a      	mov	r2, r3
 8001524:	797b      	ldrb	r3, [r7, #5]
 8001526:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001528:	2b40      	cmp	r3, #64	; 0x40
 800152a:	dd01      	ble.n	8001530 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 800152c:	2300      	movs	r3, #0
 800152e:	e05d      	b.n	80015ec <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001530:	2300      	movs	r3, #0
 8001532:	61fb      	str	r3, [r7, #28]
 8001534:	e04c      	b.n	80015d0 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001536:	68ba      	ldr	r2, [r7, #8]
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	3b20      	subs	r3, #32
 800153c:	7979      	ldrb	r1, [r7, #5]
 800153e:	fb01 f303 	mul.w	r3, r1, r3
 8001542:	4619      	mov	r1, r3
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	440b      	add	r3, r1
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	4413      	add	r3, r2
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001550:	2300      	movs	r3, #0
 8001552:	61bb      	str	r3, [r7, #24]
 8001554:	e034      	b.n	80015c0 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d012      	beq.n	800158c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001566:	4b23      	ldr	r3, [pc, #140]	; (80015f4 <ssd1306_WriteChar+0x10c>)
 8001568:	881b      	ldrh	r3, [r3, #0]
 800156a:	b2da      	uxtb	r2, r3
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	b2db      	uxtb	r3, r3
 8001570:	4413      	add	r3, r2
 8001572:	b2d8      	uxtb	r0, r3
 8001574:	4b1f      	ldr	r3, [pc, #124]	; (80015f4 <ssd1306_WriteChar+0x10c>)
 8001576:	885b      	ldrh	r3, [r3, #2]
 8001578:	b2da      	uxtb	r2, r3
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	b2db      	uxtb	r3, r3
 800157e:	4413      	add	r3, r2
 8001580:	b2db      	uxtb	r3, r3
 8001582:	7bba      	ldrb	r2, [r7, #14]
 8001584:	4619      	mov	r1, r3
 8001586:	f7ff ff5b 	bl	8001440 <ssd1306_DrawPixel>
 800158a:	e016      	b.n	80015ba <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800158c:	4b19      	ldr	r3, [pc, #100]	; (80015f4 <ssd1306_WriteChar+0x10c>)
 800158e:	881b      	ldrh	r3, [r3, #0]
 8001590:	b2da      	uxtb	r2, r3
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	4413      	add	r3, r2
 8001598:	b2d8      	uxtb	r0, r3
 800159a:	4b16      	ldr	r3, [pc, #88]	; (80015f4 <ssd1306_WriteChar+0x10c>)
 800159c:	885b      	ldrh	r3, [r3, #2]
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	4413      	add	r3, r2
 80015a6:	b2d9      	uxtb	r1, r3
 80015a8:	7bbb      	ldrb	r3, [r7, #14]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	bf0c      	ite	eq
 80015ae:	2301      	moveq	r3, #1
 80015b0:	2300      	movne	r3, #0
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	461a      	mov	r2, r3
 80015b6:	f7ff ff43 	bl	8001440 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	3301      	adds	r3, #1
 80015be:	61bb      	str	r3, [r7, #24]
 80015c0:	793b      	ldrb	r3, [r7, #4]
 80015c2:	461a      	mov	r2, r3
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d3c5      	bcc.n	8001556 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	3301      	adds	r3, #1
 80015ce:	61fb      	str	r3, [r7, #28]
 80015d0:	797b      	ldrb	r3, [r7, #5]
 80015d2:	461a      	mov	r2, r3
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d3ad      	bcc.n	8001536 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80015da:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <ssd1306_WriteChar+0x10c>)
 80015dc:	881a      	ldrh	r2, [r3, #0]
 80015de:	793b      	ldrb	r3, [r7, #4]
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	4413      	add	r3, r2
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	4b03      	ldr	r3, [pc, #12]	; (80015f4 <ssd1306_WriteChar+0x10c>)
 80015e8:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3724      	adds	r7, #36	; 0x24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd90      	pop	{r4, r7, pc}
 80015f4:	20000494 	.word	0x20000494

080015f8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	1d38      	adds	r0, r7, #4
 8001602:	e880 0006 	stmia.w	r0, {r1, r2}
 8001606:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001608:	e012      	b.n	8001630 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	7818      	ldrb	r0, [r3, #0]
 800160e:	78fb      	ldrb	r3, [r7, #3]
 8001610:	1d3a      	adds	r2, r7, #4
 8001612:	ca06      	ldmia	r2, {r1, r2}
 8001614:	f7ff ff68 	bl	80014e8 <ssd1306_WriteChar>
 8001618:	4603      	mov	r3, r0
 800161a:	461a      	mov	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	429a      	cmp	r2, r3
 8001622:	d002      	beq.n	800162a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	e008      	b.n	800163c <ssd1306_WriteString+0x44>
        }
        str++;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	3301      	adds	r3, #1
 800162e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1e8      	bne.n	800160a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	781b      	ldrb	r3, [r3, #0]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	460a      	mov	r2, r1
 800164e:	71fb      	strb	r3, [r7, #7]
 8001650:	4613      	mov	r3, r2
 8001652:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	b29a      	uxth	r2, r3
 8001658:	4b05      	ldr	r3, [pc, #20]	; (8001670 <ssd1306_SetCursor+0x2c>)
 800165a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800165c:	79bb      	ldrb	r3, [r7, #6]
 800165e:	b29a      	uxth	r2, r3
 8001660:	4b03      	ldr	r3, [pc, #12]	; (8001670 <ssd1306_SetCursor+0x2c>)
 8001662:	805a      	strh	r2, [r3, #2]
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	20000494 	.word	0x20000494

08001674 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800167e:	2381      	movs	r3, #129	; 0x81
 8001680:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001682:	7bfb      	ldrb	r3, [r7, #15]
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff fdf3 	bl	8001270 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fdef 	bl	8001270 <ssd1306_WriteCommand>
}
 8001692:	bf00      	nop
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
	...

0800169c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d005      	beq.n	80016b8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80016ac:	23af      	movs	r3, #175	; 0xaf
 80016ae:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80016b0:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <ssd1306_SetDisplayOn+0x38>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	715a      	strb	r2, [r3, #5]
 80016b6:	e004      	b.n	80016c2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80016b8:	23ae      	movs	r3, #174	; 0xae
 80016ba:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80016bc:	4b05      	ldr	r3, [pc, #20]	; (80016d4 <ssd1306_SetDisplayOn+0x38>)
 80016be:	2200      	movs	r2, #0
 80016c0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff fdd3 	bl	8001270 <ssd1306_WriteCommand>
}
 80016ca:	bf00      	nop
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000494 	.word	0x20000494

080016d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016de:	2300      	movs	r3, #0
 80016e0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e2:	2003      	movs	r0, #3
 80016e4:	f000 f960 	bl	80019a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016e8:	200f      	movs	r0, #15
 80016ea:	f000 f80d 	bl	8001708 <HAL_InitTick>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d002      	beq.n	80016fa <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	71fb      	strb	r3, [r7, #7]
 80016f8:	e001      	b.n	80016fe <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016fa:	f7ff fcbd 	bl	8001078 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016fe:	79fb      	ldrb	r3, [r7, #7]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001710:	2300      	movs	r3, #0
 8001712:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001714:	4b17      	ldr	r3, [pc, #92]	; (8001774 <HAL_InitTick+0x6c>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d023      	beq.n	8001764 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800171c:	4b16      	ldr	r3, [pc, #88]	; (8001778 <HAL_InitTick+0x70>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4b14      	ldr	r3, [pc, #80]	; (8001774 <HAL_InitTick+0x6c>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	4619      	mov	r1, r3
 8001726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800172a:	fbb3 f3f1 	udiv	r3, r3, r1
 800172e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001732:	4618      	mov	r0, r3
 8001734:	f000 f96d 	bl	8001a12 <HAL_SYSTICK_Config>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d10f      	bne.n	800175e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b0f      	cmp	r3, #15
 8001742:	d809      	bhi.n	8001758 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001744:	2200      	movs	r2, #0
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	f04f 30ff 	mov.w	r0, #4294967295
 800174c:	f000 f937 	bl	80019be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001750:	4a0a      	ldr	r2, [pc, #40]	; (800177c <HAL_InitTick+0x74>)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	e007      	b.n	8001768 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	73fb      	strb	r3, [r7, #15]
 800175c:	e004      	b.n	8001768 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	73fb      	strb	r3, [r7, #15]
 8001762:	e001      	b.n	8001768 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001768:	7bfb      	ldrb	r3, [r7, #15]
}
 800176a:	4618      	mov	r0, r3
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	2000001c 	.word	0x2000001c
 8001778:	20000004 	.word	0x20000004
 800177c:	20000018 	.word	0x20000018

08001780 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001784:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <HAL_IncTick+0x20>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	461a      	mov	r2, r3
 800178a:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_IncTick+0x24>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4413      	add	r3, r2
 8001790:	4a04      	ldr	r2, [pc, #16]	; (80017a4 <HAL_IncTick+0x24>)
 8001792:	6013      	str	r3, [r2, #0]
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	2000001c 	.word	0x2000001c
 80017a4:	2000049c 	.word	0x2000049c

080017a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return uwTick;
 80017ac:	4b03      	ldr	r3, [pc, #12]	; (80017bc <HAL_GetTick+0x14>)
 80017ae:	681b      	ldr	r3, [r3, #0]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	2000049c 	.word	0x2000049c

080017c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017c8:	f7ff ffee 	bl	80017a8 <HAL_GetTick>
 80017cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d8:	d005      	beq.n	80017e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80017da:	4b0a      	ldr	r3, [pc, #40]	; (8001804 <HAL_Delay+0x44>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	461a      	mov	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4413      	add	r3, r2
 80017e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017e6:	bf00      	nop
 80017e8:	f7ff ffde 	bl	80017a8 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d8f7      	bhi.n	80017e8 <HAL_Delay+0x28>
  {
  }
}
 80017f8:	bf00      	nop
 80017fa:	bf00      	nop
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	2000001c 	.word	0x2000001c

08001808 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <__NVIC_SetPriorityGrouping+0x44>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800181e:	68ba      	ldr	r2, [r7, #8]
 8001820:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001824:	4013      	ands	r3, r2
 8001826:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001830:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800183a:	4a04      	ldr	r2, [pc, #16]	; (800184c <__NVIC_SetPriorityGrouping+0x44>)
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	60d3      	str	r3, [r2, #12]
}
 8001840:	bf00      	nop
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001854:	4b04      	ldr	r3, [pc, #16]	; (8001868 <__NVIC_GetPriorityGrouping+0x18>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	0a1b      	lsrs	r3, r3, #8
 800185a:	f003 0307 	and.w	r3, r3, #7
}
 800185e:	4618      	mov	r0, r3
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187a:	2b00      	cmp	r3, #0
 800187c:	db0b      	blt.n	8001896 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	f003 021f 	and.w	r2, r3, #31
 8001884:	4907      	ldr	r1, [pc, #28]	; (80018a4 <__NVIC_EnableIRQ+0x38>)
 8001886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188a:	095b      	lsrs	r3, r3, #5
 800188c:	2001      	movs	r0, #1
 800188e:	fa00 f202 	lsl.w	r2, r0, r2
 8001892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	e000e100 	.word	0xe000e100

080018a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	6039      	str	r1, [r7, #0]
 80018b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	db0a      	blt.n	80018d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	490c      	ldr	r1, [pc, #48]	; (80018f4 <__NVIC_SetPriority+0x4c>)
 80018c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c6:	0112      	lsls	r2, r2, #4
 80018c8:	b2d2      	uxtb	r2, r2
 80018ca:	440b      	add	r3, r1
 80018cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018d0:	e00a      	b.n	80018e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	4908      	ldr	r1, [pc, #32]	; (80018f8 <__NVIC_SetPriority+0x50>)
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	f003 030f 	and.w	r3, r3, #15
 80018de:	3b04      	subs	r3, #4
 80018e0:	0112      	lsls	r2, r2, #4
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	440b      	add	r3, r1
 80018e6:	761a      	strb	r2, [r3, #24]
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	e000e100 	.word	0xe000e100
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b089      	sub	sp, #36	; 0x24
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	f1c3 0307 	rsb	r3, r3, #7
 8001916:	2b04      	cmp	r3, #4
 8001918:	bf28      	it	cs
 800191a:	2304      	movcs	r3, #4
 800191c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3304      	adds	r3, #4
 8001922:	2b06      	cmp	r3, #6
 8001924:	d902      	bls.n	800192c <NVIC_EncodePriority+0x30>
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	3b03      	subs	r3, #3
 800192a:	e000      	b.n	800192e <NVIC_EncodePriority+0x32>
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001930:	f04f 32ff 	mov.w	r2, #4294967295
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43da      	mvns	r2, r3
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	401a      	ands	r2, r3
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001944:	f04f 31ff 	mov.w	r1, #4294967295
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	fa01 f303 	lsl.w	r3, r1, r3
 800194e:	43d9      	mvns	r1, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001954:	4313      	orrs	r3, r2
         );
}
 8001956:	4618      	mov	r0, r3
 8001958:	3724      	adds	r7, #36	; 0x24
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
	...

08001964 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3b01      	subs	r3, #1
 8001970:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001974:	d301      	bcc.n	800197a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001976:	2301      	movs	r3, #1
 8001978:	e00f      	b.n	800199a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800197a:	4a0a      	ldr	r2, [pc, #40]	; (80019a4 <SysTick_Config+0x40>)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3b01      	subs	r3, #1
 8001980:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001982:	210f      	movs	r1, #15
 8001984:	f04f 30ff 	mov.w	r0, #4294967295
 8001988:	f7ff ff8e 	bl	80018a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800198c:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <SysTick_Config+0x40>)
 800198e:	2200      	movs	r2, #0
 8001990:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001992:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <SysTick_Config+0x40>)
 8001994:	2207      	movs	r2, #7
 8001996:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	e000e010 	.word	0xe000e010

080019a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff ff29 	bl	8001808 <__NVIC_SetPriorityGrouping>
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b086      	sub	sp, #24
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	4603      	mov	r3, r0
 80019c6:	60b9      	str	r1, [r7, #8]
 80019c8:	607a      	str	r2, [r7, #4]
 80019ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019d0:	f7ff ff3e 	bl	8001850 <__NVIC_GetPriorityGrouping>
 80019d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	68b9      	ldr	r1, [r7, #8]
 80019da:	6978      	ldr	r0, [r7, #20]
 80019dc:	f7ff ff8e 	bl	80018fc <NVIC_EncodePriority>
 80019e0:	4602      	mov	r2, r0
 80019e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019e6:	4611      	mov	r1, r2
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ff5d 	bl	80018a8 <__NVIC_SetPriority>
}
 80019ee:	bf00      	nop
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	4603      	mov	r3, r0
 80019fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff ff31 	bl	800186c <__NVIC_EnableIRQ>
}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff ffa2 	bl	8001964 <SysTick_Config>
 8001a20:	4603      	mov	r3, r0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
	...

08001a2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b087      	sub	sp, #28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a3a:	e148      	b.n	8001cce <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	2101      	movs	r1, #1
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	fa01 f303 	lsl.w	r3, r1, r3
 8001a48:	4013      	ands	r3, r2
 8001a4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f000 813a 	beq.w	8001cc8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 0303 	and.w	r3, r3, #3
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d005      	beq.n	8001a6c <HAL_GPIO_Init+0x40>
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d130      	bne.n	8001ace <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	2203      	movs	r2, #3
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	4013      	ands	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	68da      	ldr	r2, [r3, #12]
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	091b      	lsrs	r3, r3, #4
 8001ab8:	f003 0201 	and.w	r2, r3, #1
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f003 0303 	and.w	r3, r3, #3
 8001ad6:	2b03      	cmp	r3, #3
 8001ad8:	d017      	beq.n	8001b0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	2203      	movs	r2, #3
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43db      	mvns	r3, r3
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	4013      	ands	r3, r2
 8001af0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	689a      	ldr	r2, [r3, #8]
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f003 0303 	and.w	r3, r3, #3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d123      	bne.n	8001b5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	08da      	lsrs	r2, r3, #3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3208      	adds	r2, #8
 8001b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	220f      	movs	r2, #15
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43db      	mvns	r3, r3
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	4013      	ands	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	691a      	ldr	r2, [r3, #16]
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	08da      	lsrs	r2, r3, #3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3208      	adds	r2, #8
 8001b58:	6939      	ldr	r1, [r7, #16]
 8001b5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	2203      	movs	r2, #3
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	4013      	ands	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f003 0203 	and.w	r2, r3, #3
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f000 8094 	beq.w	8001cc8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba0:	4b52      	ldr	r3, [pc, #328]	; (8001cec <HAL_GPIO_Init+0x2c0>)
 8001ba2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ba4:	4a51      	ldr	r2, [pc, #324]	; (8001cec <HAL_GPIO_Init+0x2c0>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	6613      	str	r3, [r2, #96]	; 0x60
 8001bac:	4b4f      	ldr	r3, [pc, #316]	; (8001cec <HAL_GPIO_Init+0x2c0>)
 8001bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bb8:	4a4d      	ldr	r2, [pc, #308]	; (8001cf0 <HAL_GPIO_Init+0x2c4>)
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	089b      	lsrs	r3, r3, #2
 8001bbe:	3302      	adds	r3, #2
 8001bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	220f      	movs	r2, #15
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001be2:	d00d      	beq.n	8001c00 <HAL_GPIO_Init+0x1d4>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a43      	ldr	r2, [pc, #268]	; (8001cf4 <HAL_GPIO_Init+0x2c8>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d007      	beq.n	8001bfc <HAL_GPIO_Init+0x1d0>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a42      	ldr	r2, [pc, #264]	; (8001cf8 <HAL_GPIO_Init+0x2cc>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d101      	bne.n	8001bf8 <HAL_GPIO_Init+0x1cc>
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	e004      	b.n	8001c02 <HAL_GPIO_Init+0x1d6>
 8001bf8:	2307      	movs	r3, #7
 8001bfa:	e002      	b.n	8001c02 <HAL_GPIO_Init+0x1d6>
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e000      	b.n	8001c02 <HAL_GPIO_Init+0x1d6>
 8001c00:	2300      	movs	r3, #0
 8001c02:	697a      	ldr	r2, [r7, #20]
 8001c04:	f002 0203 	and.w	r2, r2, #3
 8001c08:	0092      	lsls	r2, r2, #2
 8001c0a:	4093      	lsls	r3, r2
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c12:	4937      	ldr	r1, [pc, #220]	; (8001cf0 <HAL_GPIO_Init+0x2c4>)
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	089b      	lsrs	r3, r3, #2
 8001c18:	3302      	adds	r3, #2
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c20:	4b36      	ldr	r3, [pc, #216]	; (8001cfc <HAL_GPIO_Init+0x2d0>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c44:	4a2d      	ldr	r2, [pc, #180]	; (8001cfc <HAL_GPIO_Init+0x2d0>)
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c4a:	4b2c      	ldr	r3, [pc, #176]	; (8001cfc <HAL_GPIO_Init+0x2d0>)
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	43db      	mvns	r3, r3
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	4013      	ands	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c6e:	4a23      	ldr	r2, [pc, #140]	; (8001cfc <HAL_GPIO_Init+0x2d0>)
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c74:	4b21      	ldr	r3, [pc, #132]	; (8001cfc <HAL_GPIO_Init+0x2d0>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4013      	ands	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c98:	4a18      	ldr	r2, [pc, #96]	; (8001cfc <HAL_GPIO_Init+0x2d0>)
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c9e:	4b17      	ldr	r3, [pc, #92]	; (8001cfc <HAL_GPIO_Init+0x2d0>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	4013      	ands	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cc2:	4a0e      	ldr	r2, [pc, #56]	; (8001cfc <HAL_GPIO_Init+0x2d0>)
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f47f aeaf 	bne.w	8001a3c <HAL_GPIO_Init+0x10>
  }
}
 8001cde:	bf00      	nop
 8001ce0:	bf00      	nop
 8001ce2:	371c      	adds	r7, #28
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40010000 	.word	0x40010000
 8001cf4:	48000400 	.word	0x48000400
 8001cf8:	48000800 	.word	0x48000800
 8001cfc:	40010400 	.word	0x40010400

08001d00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691a      	ldr	r2, [r3, #16]
 8001d10:	887b      	ldrh	r3, [r7, #2]
 8001d12:	4013      	ands	r3, r2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d002      	beq.n	8001d1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	73fb      	strb	r3, [r7, #15]
 8001d1c:	e001      	b.n	8001d22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d3a:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d3c:	695a      	ldr	r2, [r3, #20]
 8001d3e:	88fb      	ldrh	r3, [r7, #6]
 8001d40:	4013      	ands	r3, r2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d006      	beq.n	8001d54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d46:	4a05      	ldr	r2, [pc, #20]	; (8001d5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d48:	88fb      	ldrh	r3, [r7, #6]
 8001d4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d4c:	88fb      	ldrh	r3, [r7, #6]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff f90a 	bl	8000f68 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d54:	bf00      	nop
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40010400 	.word	0x40010400

08001d60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e081      	b.n	8001e76 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d106      	bne.n	8001d8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff f99a 	bl	80010c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2224      	movs	r2, #36	; 0x24
 8001d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 0201 	bic.w	r2, r2, #1
 8001da2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001db0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dc0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d107      	bne.n	8001dda <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689a      	ldr	r2, [r3, #8]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	e006      	b.n	8001de8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689a      	ldr	r2, [r3, #8]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001de6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d104      	bne.n	8001dfa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001df8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	6812      	ldr	r2, [r2, #0]
 8001e04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e0c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e1c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	691a      	ldr	r2, [r3, #16]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	430a      	orrs	r2, r1
 8001e36:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69d9      	ldr	r1, [r3, #28]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a1a      	ldr	r2, [r3, #32]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0201 	orr.w	r2, r2, #1
 8001e56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2220      	movs	r2, #32
 8001e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b088      	sub	sp, #32
 8001e84:	af02      	add	r7, sp, #8
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	4608      	mov	r0, r1
 8001e8a:	4611      	mov	r1, r2
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	4603      	mov	r3, r0
 8001e90:	817b      	strh	r3, [r7, #10]
 8001e92:	460b      	mov	r3, r1
 8001e94:	813b      	strh	r3, [r7, #8]
 8001e96:	4613      	mov	r3, r2
 8001e98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b20      	cmp	r3, #32
 8001ea4:	f040 80f9 	bne.w	800209a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ea8:	6a3b      	ldr	r3, [r7, #32]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d002      	beq.n	8001eb4 <HAL_I2C_Mem_Write+0x34>
 8001eae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d105      	bne.n	8001ec0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0ed      	b.n	800209c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d101      	bne.n	8001ece <HAL_I2C_Mem_Write+0x4e>
 8001eca:	2302      	movs	r3, #2
 8001ecc:	e0e6      	b.n	800209c <HAL_I2C_Mem_Write+0x21c>
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ed6:	f7ff fc67 	bl	80017a8 <HAL_GetTick>
 8001eda:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	2319      	movs	r3, #25
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ee8:	68f8      	ldr	r0, [r7, #12]
 8001eea:	f000 f955 	bl	8002198 <I2C_WaitOnFlagUntilTimeout>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e0d1      	b.n	800209c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2221      	movs	r2, #33	; 0x21
 8001efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2240      	movs	r2, #64	; 0x40
 8001f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6a3a      	ldr	r2, [r7, #32]
 8001f12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f20:	88f8      	ldrh	r0, [r7, #6]
 8001f22:	893a      	ldrh	r2, [r7, #8]
 8001f24:	8979      	ldrh	r1, [r7, #10]
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	9301      	str	r3, [sp, #4]
 8001f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	4603      	mov	r3, r0
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	f000 f8b9 	bl	80020a8 <I2C_RequestMemoryWrite>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d005      	beq.n	8001f48 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e0a9      	b.n	800209c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	2bff      	cmp	r3, #255	; 0xff
 8001f50:	d90e      	bls.n	8001f70 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	22ff      	movs	r2, #255	; 0xff
 8001f56:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	8979      	ldrh	r1, [r7, #10]
 8001f60:	2300      	movs	r3, #0
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f000 fabd 	bl	80024e8 <I2C_TransferConfig>
 8001f6e:	e00f      	b.n	8001f90 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	8979      	ldrh	r1, [r7, #10]
 8001f82:	2300      	movs	r3, #0
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f000 faac 	bl	80024e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f94:	68f8      	ldr	r0, [r7, #12]
 8001f96:	f000 f93f 	bl	8002218 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e07b      	b.n	800209c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa8:	781a      	ldrb	r2, [r3, #0]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb4:	1c5a      	adds	r2, r3, #1
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d034      	beq.n	8002048 <HAL_I2C_Mem_Write+0x1c8>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d130      	bne.n	8002048 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fec:	2200      	movs	r2, #0
 8001fee:	2180      	movs	r1, #128	; 0x80
 8001ff0:	68f8      	ldr	r0, [r7, #12]
 8001ff2:	f000 f8d1 	bl	8002198 <I2C_WaitOnFlagUntilTimeout>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e04d      	b.n	800209c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002004:	b29b      	uxth	r3, r3
 8002006:	2bff      	cmp	r3, #255	; 0xff
 8002008:	d90e      	bls.n	8002028 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	22ff      	movs	r2, #255	; 0xff
 800200e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002014:	b2da      	uxtb	r2, r3
 8002016:	8979      	ldrh	r1, [r7, #10]
 8002018:	2300      	movs	r3, #0
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f000 fa61 	bl	80024e8 <I2C_TransferConfig>
 8002026:	e00f      	b.n	8002048 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800202c:	b29a      	uxth	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002036:	b2da      	uxtb	r2, r3
 8002038:	8979      	ldrh	r1, [r7, #10]
 800203a:	2300      	movs	r3, #0
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	f000 fa50 	bl	80024e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800204c:	b29b      	uxth	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d19e      	bne.n	8001f90 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002056:	68f8      	ldr	r0, [r7, #12]
 8002058:	f000 f91e 	bl	8002298 <I2C_WaitOnSTOPFlagUntilTimeout>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e01a      	b.n	800209c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2220      	movs	r2, #32
 800206c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	6859      	ldr	r1, [r3, #4]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <HAL_I2C_Mem_Write+0x224>)
 800207a:	400b      	ands	r3, r1
 800207c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2220      	movs	r2, #32
 8002082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	e000      	b.n	800209c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800209a:	2302      	movs	r3, #2
  }
}
 800209c:	4618      	mov	r0, r3
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	fe00e800 	.word	0xfe00e800

080020a8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af02      	add	r7, sp, #8
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	4608      	mov	r0, r1
 80020b2:	4611      	mov	r1, r2
 80020b4:	461a      	mov	r2, r3
 80020b6:	4603      	mov	r3, r0
 80020b8:	817b      	strh	r3, [r7, #10]
 80020ba:	460b      	mov	r3, r1
 80020bc:	813b      	strh	r3, [r7, #8]
 80020be:	4613      	mov	r3, r2
 80020c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80020c2:	88fb      	ldrh	r3, [r7, #6]
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	8979      	ldrh	r1, [r7, #10]
 80020c8:	4b20      	ldr	r3, [pc, #128]	; (800214c <I2C_RequestMemoryWrite+0xa4>)
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f000 fa09 	bl	80024e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020d6:	69fa      	ldr	r2, [r7, #28]
 80020d8:	69b9      	ldr	r1, [r7, #24]
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f000 f89c 	bl	8002218 <I2C_WaitOnTXISFlagUntilTimeout>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e02c      	b.n	8002144 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80020ea:	88fb      	ldrh	r3, [r7, #6]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d105      	bne.n	80020fc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020f0:	893b      	ldrh	r3, [r7, #8]
 80020f2:	b2da      	uxtb	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	629a      	str	r2, [r3, #40]	; 0x28
 80020fa:	e015      	b.n	8002128 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80020fc:	893b      	ldrh	r3, [r7, #8]
 80020fe:	0a1b      	lsrs	r3, r3, #8
 8002100:	b29b      	uxth	r3, r3
 8002102:	b2da      	uxtb	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800210a:	69fa      	ldr	r2, [r7, #28]
 800210c:	69b9      	ldr	r1, [r7, #24]
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 f882 	bl	8002218 <I2C_WaitOnTXISFlagUntilTimeout>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e012      	b.n	8002144 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800211e:	893b      	ldrh	r3, [r7, #8]
 8002120:	b2da      	uxtb	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	9300      	str	r3, [sp, #0]
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	2200      	movs	r2, #0
 8002130:	2180      	movs	r1, #128	; 0x80
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f000 f830 	bl	8002198 <I2C_WaitOnFlagUntilTimeout>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e000      	b.n	8002144 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	80002000 	.word	0x80002000

08002150 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b02      	cmp	r3, #2
 8002164:	d103      	bne.n	800216e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2200      	movs	r2, #0
 800216c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b01      	cmp	r3, #1
 800217a:	d007      	beq.n	800218c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	699a      	ldr	r2, [r3, #24]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f042 0201 	orr.w	r2, r2, #1
 800218a:	619a      	str	r2, [r3, #24]
  }
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	603b      	str	r3, [r7, #0]
 80021a4:	4613      	mov	r3, r2
 80021a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021a8:	e022      	b.n	80021f0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b0:	d01e      	beq.n	80021f0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021b2:	f7ff faf9 	bl	80017a8 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d302      	bcc.n	80021c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d113      	bne.n	80021f0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021cc:	f043 0220 	orr.w	r2, r3, #32
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2220      	movs	r2, #32
 80021d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e00f      	b.n	8002210 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	699a      	ldr	r2, [r3, #24]
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	4013      	ands	r3, r2
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	bf0c      	ite	eq
 8002200:	2301      	moveq	r3, #1
 8002202:	2300      	movne	r3, #0
 8002204:	b2db      	uxtb	r3, r3
 8002206:	461a      	mov	r2, r3
 8002208:	79fb      	ldrb	r3, [r7, #7]
 800220a:	429a      	cmp	r2, r3
 800220c:	d0cd      	beq.n	80021aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002224:	e02c      	b.n	8002280 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	68b9      	ldr	r1, [r7, #8]
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 f870 	bl	8002310 <I2C_IsErrorOccurred>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e02a      	b.n	8002290 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002240:	d01e      	beq.n	8002280 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002242:	f7ff fab1 	bl	80017a8 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	68ba      	ldr	r2, [r7, #8]
 800224e:	429a      	cmp	r2, r3
 8002250:	d302      	bcc.n	8002258 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d113      	bne.n	8002280 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225c:	f043 0220 	orr.w	r2, r3, #32
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2220      	movs	r2, #32
 8002268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e007      	b.n	8002290 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b02      	cmp	r3, #2
 800228c:	d1cb      	bne.n	8002226 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022a4:	e028      	b.n	80022f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	68b9      	ldr	r1, [r7, #8]
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f000 f830 	bl	8002310 <I2C_IsErrorOccurred>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e026      	b.n	8002308 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ba:	f7ff fa75 	bl	80017a8 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	68ba      	ldr	r2, [r7, #8]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d302      	bcc.n	80022d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d113      	bne.n	80022f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d4:	f043 0220 	orr.w	r2, r3, #32
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2220      	movs	r2, #32
 80022e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e007      	b.n	8002308 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	f003 0320 	and.w	r3, r3, #32
 8002302:	2b20      	cmp	r3, #32
 8002304:	d1cf      	bne.n	80022a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08a      	sub	sp, #40	; 0x28
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800231c:	2300      	movs	r3, #0
 800231e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800232a:	2300      	movs	r3, #0
 800232c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	f003 0310 	and.w	r3, r3, #16
 8002338:	2b00      	cmp	r3, #0
 800233a:	d075      	beq.n	8002428 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2210      	movs	r2, #16
 8002342:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002344:	e056      	b.n	80023f4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800234c:	d052      	beq.n	80023f4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800234e:	f7ff fa2b 	bl	80017a8 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	68ba      	ldr	r2, [r7, #8]
 800235a:	429a      	cmp	r2, r3
 800235c:	d302      	bcc.n	8002364 <I2C_IsErrorOccurred+0x54>
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d147      	bne.n	80023f4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800236e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002376:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002382:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002386:	d12e      	bne.n	80023e6 <I2C_IsErrorOccurred+0xd6>
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800238e:	d02a      	beq.n	80023e6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002390:	7cfb      	ldrb	r3, [r7, #19]
 8002392:	2b20      	cmp	r3, #32
 8002394:	d027      	beq.n	80023e6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023a4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80023a6:	f7ff f9ff 	bl	80017a8 <HAL_GetTick>
 80023aa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023ac:	e01b      	b.n	80023e6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80023ae:	f7ff f9fb 	bl	80017a8 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b19      	cmp	r3, #25
 80023ba:	d914      	bls.n	80023e6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c0:	f043 0220 	orr.w	r2, r3, #32
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2220      	movs	r2, #32
 80023cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	f003 0320 	and.w	r3, r3, #32
 80023f0:	2b20      	cmp	r3, #32
 80023f2:	d1dc      	bne.n	80023ae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	f003 0320 	and.w	r3, r3, #32
 80023fe:	2b20      	cmp	r3, #32
 8002400:	d003      	beq.n	800240a <I2C_IsErrorOccurred+0xfa>
 8002402:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002406:	2b00      	cmp	r3, #0
 8002408:	d09d      	beq.n	8002346 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800240a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800240e:	2b00      	cmp	r3, #0
 8002410:	d103      	bne.n	800241a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2220      	movs	r2, #32
 8002418:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800241a:	6a3b      	ldr	r3, [r7, #32]
 800241c:	f043 0304 	orr.w	r3, r3, #4
 8002420:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00b      	beq.n	8002452 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800243a:	6a3b      	ldr	r3, [r7, #32]
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f44f 7280 	mov.w	r2, #256	; 0x100
 800244a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00b      	beq.n	8002474 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800245c:	6a3b      	ldr	r3, [r7, #32]
 800245e:	f043 0308 	orr.w	r3, r3, #8
 8002462:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800246c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00b      	beq.n	8002496 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800247e:	6a3b      	ldr	r3, [r7, #32]
 8002480:	f043 0302 	orr.w	r3, r3, #2
 8002484:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800248e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002496:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800249a:	2b00      	cmp	r3, #0
 800249c:	d01c      	beq.n	80024d8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f7ff fe56 	bl	8002150 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6859      	ldr	r1, [r3, #4]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	4b0d      	ldr	r3, [pc, #52]	; (80024e4 <I2C_IsErrorOccurred+0x1d4>)
 80024b0:	400b      	ands	r3, r1
 80024b2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024b8:	6a3b      	ldr	r3, [r7, #32]
 80024ba:	431a      	orrs	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2220      	movs	r2, #32
 80024c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80024d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3728      	adds	r7, #40	; 0x28
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	fe00e800 	.word	0xfe00e800

080024e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b087      	sub	sp, #28
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	607b      	str	r3, [r7, #4]
 80024f2:	460b      	mov	r3, r1
 80024f4:	817b      	strh	r3, [r7, #10]
 80024f6:	4613      	mov	r3, r2
 80024f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024fa:	897b      	ldrh	r3, [r7, #10]
 80024fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002500:	7a7b      	ldrb	r3, [r7, #9]
 8002502:	041b      	lsls	r3, r3, #16
 8002504:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002508:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800250e:	6a3b      	ldr	r3, [r7, #32]
 8002510:	4313      	orrs	r3, r2
 8002512:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002516:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	6a3b      	ldr	r3, [r7, #32]
 8002520:	0d5b      	lsrs	r3, r3, #21
 8002522:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002526:	4b08      	ldr	r3, [pc, #32]	; (8002548 <I2C_TransferConfig+0x60>)
 8002528:	430b      	orrs	r3, r1
 800252a:	43db      	mvns	r3, r3
 800252c:	ea02 0103 	and.w	r1, r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	430a      	orrs	r2, r1
 8002538:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800253a:	bf00      	nop
 800253c:	371c      	adds	r7, #28
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	03ff63ff 	.word	0x03ff63ff

0800254c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b20      	cmp	r3, #32
 8002560:	d138      	bne.n	80025d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002568:	2b01      	cmp	r3, #1
 800256a:	d101      	bne.n	8002570 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800256c:	2302      	movs	r3, #2
 800256e:	e032      	b.n	80025d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2224      	movs	r2, #36	; 0x24
 800257c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0201 	bic.w	r2, r2, #1
 800258e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800259e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6819      	ldr	r1, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f042 0201 	orr.w	r2, r2, #1
 80025be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2220      	movs	r2, #32
 80025c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025d0:	2300      	movs	r3, #0
 80025d2:	e000      	b.n	80025d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80025d4:	2302      	movs	r3, #2
  }
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b085      	sub	sp, #20
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
 80025ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b20      	cmp	r3, #32
 80025f6:	d139      	bne.n	800266c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d101      	bne.n	8002606 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002602:	2302      	movs	r3, #2
 8002604:	e033      	b.n	800266e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2224      	movs	r2, #36	; 0x24
 8002612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 0201 	bic.w	r2, r2, #1
 8002624:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002634:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	021b      	lsls	r3, r3, #8
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	4313      	orrs	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0201 	orr.w	r2, r2, #1
 8002656:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2220      	movs	r2, #32
 800265c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002668:	2300      	movs	r3, #0
 800266a:	e000      	b.n	800266e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800266c:	2302      	movs	r3, #2
  }
}
 800266e:	4618      	mov	r0, r3
 8002670:	3714      	adds	r7, #20
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
	...

0800267c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002680:	4b04      	ldr	r3, [pc, #16]	; (8002694 <HAL_PWREx_GetVoltageRange+0x18>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002688:	4618      	mov	r0, r3
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	40007000 	.word	0x40007000

08002698 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026a6:	d130      	bne.n	800270a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80026a8:	4b23      	ldr	r3, [pc, #140]	; (8002738 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026b4:	d038      	beq.n	8002728 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026b6:	4b20      	ldr	r3, [pc, #128]	; (8002738 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026be:	4a1e      	ldr	r2, [pc, #120]	; (8002738 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026c4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026c6:	4b1d      	ldr	r3, [pc, #116]	; (800273c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2232      	movs	r2, #50	; 0x32
 80026cc:	fb02 f303 	mul.w	r3, r2, r3
 80026d0:	4a1b      	ldr	r2, [pc, #108]	; (8002740 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80026d2:	fba2 2303 	umull	r2, r3, r2, r3
 80026d6:	0c9b      	lsrs	r3, r3, #18
 80026d8:	3301      	adds	r3, #1
 80026da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026dc:	e002      	b.n	80026e4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	3b01      	subs	r3, #1
 80026e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026e4:	4b14      	ldr	r3, [pc, #80]	; (8002738 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026f0:	d102      	bne.n	80026f8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1f2      	bne.n	80026de <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026f8:	4b0f      	ldr	r3, [pc, #60]	; (8002738 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002700:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002704:	d110      	bne.n	8002728 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e00f      	b.n	800272a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800270a:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002716:	d007      	beq.n	8002728 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002718:	4b07      	ldr	r3, [pc, #28]	; (8002738 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002720:	4a05      	ldr	r2, [pc, #20]	; (8002738 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002722:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002726:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	40007000 	.word	0x40007000
 800273c:	20000004 	.word	0x20000004
 8002740:	431bde83 	.word	0x431bde83

08002744 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b088      	sub	sp, #32
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d102      	bne.n	8002758 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	f000 bc02 	b.w	8002f5c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002758:	4b96      	ldr	r3, [pc, #600]	; (80029b4 <HAL_RCC_OscConfig+0x270>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f003 030c 	and.w	r3, r3, #12
 8002760:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002762:	4b94      	ldr	r3, [pc, #592]	; (80029b4 <HAL_RCC_OscConfig+0x270>)
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	f003 0303 	and.w	r3, r3, #3
 800276a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0310 	and.w	r3, r3, #16
 8002774:	2b00      	cmp	r3, #0
 8002776:	f000 80e4 	beq.w	8002942 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d007      	beq.n	8002790 <HAL_RCC_OscConfig+0x4c>
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	2b0c      	cmp	r3, #12
 8002784:	f040 808b 	bne.w	800289e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	2b01      	cmp	r3, #1
 800278c:	f040 8087 	bne.w	800289e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002790:	4b88      	ldr	r3, [pc, #544]	; (80029b4 <HAL_RCC_OscConfig+0x270>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d005      	beq.n	80027a8 <HAL_RCC_OscConfig+0x64>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e3d9      	b.n	8002f5c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a1a      	ldr	r2, [r3, #32]
 80027ac:	4b81      	ldr	r3, [pc, #516]	; (80029b4 <HAL_RCC_OscConfig+0x270>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0308 	and.w	r3, r3, #8
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d004      	beq.n	80027c2 <HAL_RCC_OscConfig+0x7e>
 80027b8:	4b7e      	ldr	r3, [pc, #504]	; (80029b4 <HAL_RCC_OscConfig+0x270>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027c0:	e005      	b.n	80027ce <HAL_RCC_OscConfig+0x8a>
 80027c2:	4b7c      	ldr	r3, [pc, #496]	; (80029b4 <HAL_RCC_OscConfig+0x270>)
 80027c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027c8:	091b      	lsrs	r3, r3, #4
 80027ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d223      	bcs.n	800281a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 fd54 	bl	8003284 <RCC_SetFlashLatencyFromMSIRange>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e3ba      	b.n	8002f5c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027e6:	4b73      	ldr	r3, [pc, #460]	; (80029b4 <HAL_RCC_OscConfig+0x270>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a72      	ldr	r2, [pc, #456]	; (80029b4 <HAL_RCC_OscConfig+0x270>)
 80027ec:	f043 0308 	orr.w	r3, r3, #8
 80027f0:	6013      	str	r3, [r2, #0]
 80027f2:	4b70      	ldr	r3, [pc, #448]	; (80029b4 <HAL_RCC_OscConfig+0x270>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	496d      	ldr	r1, [pc, #436]	; (80029b4 <HAL_RCC_OscConfig+0x270>)
 8002800:	4313      	orrs	r3, r2
 8002802:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002804:	4b6b      	ldr	r3, [pc, #428]	; (80029b4 <HAL_RCC_OscConfig+0x270>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	021b      	lsls	r3, r3, #8
 8002812:	4968      	ldr	r1, [pc, #416]	; (80029b4 <HAL_RCC_OscConfig+0x270>)
 8002814:	4313      	orrs	r3, r2
 8002816:	604b      	str	r3, [r1, #4]
 8002818:	e025      	b.n	8002866 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800281a:	4b66      	ldr	r3, [pc, #408]	; (80029b4 <HAL_RCC_OscConfig+0x270>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a65      	ldr	r2, [pc, #404]	; (80029b4 <HAL_RCC_OscConfig+0x270>)
 8002820:	f043 0308 	orr.w	r3, r3, #8
 8002824:	6013      	str	r3, [r2, #0]
 8002826:	4b63      	ldr	r3, [pc, #396]	; (80029b4 <HAL_RCC_OscConfig+0x270>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	4960      	ldr	r1, [pc, #384]	; (80029b4 <HAL_RCC_OscConfig+0x270>)
 8002834:	4313      	orrs	r3, r2
 8002836:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002838:	4b5e      	ldr	r3, [pc, #376]	; (80029b4 <HAL_RCC_OscConfig+0x270>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	69db      	ldr	r3, [r3, #28]
 8002844:	021b      	lsls	r3, r3, #8
 8002846:	495b      	ldr	r1, [pc, #364]	; (80029b4 <HAL_RCC_OscConfig+0x270>)
 8002848:	4313      	orrs	r3, r2
 800284a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d109      	bne.n	8002866 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	4618      	mov	r0, r3
 8002858:	f000 fd14 	bl	8003284 <RCC_SetFlashLatencyFromMSIRange>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e37a      	b.n	8002f5c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002866:	f000 fc81 	bl	800316c <HAL_RCC_GetSysClockFreq>
 800286a:	4602      	mov	r2, r0
 800286c:	4b51      	ldr	r3, [pc, #324]	; (80029b4 <HAL_RCC_OscConfig+0x270>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	091b      	lsrs	r3, r3, #4
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	4950      	ldr	r1, [pc, #320]	; (80029b8 <HAL_RCC_OscConfig+0x274>)
 8002878:	5ccb      	ldrb	r3, [r1, r3]
 800287a:	f003 031f 	and.w	r3, r3, #31
 800287e:	fa22 f303 	lsr.w	r3, r2, r3
 8002882:	4a4e      	ldr	r2, [pc, #312]	; (80029bc <HAL_RCC_OscConfig+0x278>)
 8002884:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002886:	4b4e      	ldr	r3, [pc, #312]	; (80029c0 <HAL_RCC_OscConfig+0x27c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f7fe ff3c 	bl	8001708 <HAL_InitTick>
 8002890:	4603      	mov	r3, r0
 8002892:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002894:	7bfb      	ldrb	r3, [r7, #15]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d052      	beq.n	8002940 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800289a:	7bfb      	ldrb	r3, [r7, #15]
 800289c:	e35e      	b.n	8002f5c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d032      	beq.n	800290c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028a6:	4b43      	ldr	r3, [pc, #268]	; (80029b4 <HAL_RCC_OscConfig+0x270>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a42      	ldr	r2, [pc, #264]	; (80029b4 <HAL_RCC_OscConfig+0x270>)
 80028ac:	f043 0301 	orr.w	r3, r3, #1
 80028b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028b2:	f7fe ff79 	bl	80017a8 <HAL_GetTick>
 80028b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028b8:	e008      	b.n	80028cc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028ba:	f7fe ff75 	bl	80017a8 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e347      	b.n	8002f5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028cc:	4b39      	ldr	r3, [pc, #228]	; (80029b4 <HAL_RCC_OscConfig+0x270>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d0f0      	beq.n	80028ba <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028d8:	4b36      	ldr	r3, [pc, #216]	; (80029b4 <HAL_RCC_OscConfig+0x270>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a35      	ldr	r2, [pc, #212]	; (80029b4 <HAL_RCC_OscConfig+0x270>)
 80028de:	f043 0308 	orr.w	r3, r3, #8
 80028e2:	6013      	str	r3, [r2, #0]
 80028e4:	4b33      	ldr	r3, [pc, #204]	; (80029b4 <HAL_RCC_OscConfig+0x270>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	4930      	ldr	r1, [pc, #192]	; (80029b4 <HAL_RCC_OscConfig+0x270>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028f6:	4b2f      	ldr	r3, [pc, #188]	; (80029b4 <HAL_RCC_OscConfig+0x270>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	021b      	lsls	r3, r3, #8
 8002904:	492b      	ldr	r1, [pc, #172]	; (80029b4 <HAL_RCC_OscConfig+0x270>)
 8002906:	4313      	orrs	r3, r2
 8002908:	604b      	str	r3, [r1, #4]
 800290a:	e01a      	b.n	8002942 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800290c:	4b29      	ldr	r3, [pc, #164]	; (80029b4 <HAL_RCC_OscConfig+0x270>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a28      	ldr	r2, [pc, #160]	; (80029b4 <HAL_RCC_OscConfig+0x270>)
 8002912:	f023 0301 	bic.w	r3, r3, #1
 8002916:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002918:	f7fe ff46 	bl	80017a8 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002920:	f7fe ff42 	bl	80017a8 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e314      	b.n	8002f5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002932:	4b20      	ldr	r3, [pc, #128]	; (80029b4 <HAL_RCC_OscConfig+0x270>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1f0      	bne.n	8002920 <HAL_RCC_OscConfig+0x1dc>
 800293e:	e000      	b.n	8002942 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002940:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d073      	beq.n	8002a36 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	2b08      	cmp	r3, #8
 8002952:	d005      	beq.n	8002960 <HAL_RCC_OscConfig+0x21c>
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	2b0c      	cmp	r3, #12
 8002958:	d10e      	bne.n	8002978 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	2b03      	cmp	r3, #3
 800295e:	d10b      	bne.n	8002978 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002960:	4b14      	ldr	r3, [pc, #80]	; (80029b4 <HAL_RCC_OscConfig+0x270>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d063      	beq.n	8002a34 <HAL_RCC_OscConfig+0x2f0>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d15f      	bne.n	8002a34 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e2f1      	b.n	8002f5c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002980:	d106      	bne.n	8002990 <HAL_RCC_OscConfig+0x24c>
 8002982:	4b0c      	ldr	r3, [pc, #48]	; (80029b4 <HAL_RCC_OscConfig+0x270>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a0b      	ldr	r2, [pc, #44]	; (80029b4 <HAL_RCC_OscConfig+0x270>)
 8002988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800298c:	6013      	str	r3, [r2, #0]
 800298e:	e025      	b.n	80029dc <HAL_RCC_OscConfig+0x298>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002998:	d114      	bne.n	80029c4 <HAL_RCC_OscConfig+0x280>
 800299a:	4b06      	ldr	r3, [pc, #24]	; (80029b4 <HAL_RCC_OscConfig+0x270>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a05      	ldr	r2, [pc, #20]	; (80029b4 <HAL_RCC_OscConfig+0x270>)
 80029a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	4b03      	ldr	r3, [pc, #12]	; (80029b4 <HAL_RCC_OscConfig+0x270>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a02      	ldr	r2, [pc, #8]	; (80029b4 <HAL_RCC_OscConfig+0x270>)
 80029ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	e013      	b.n	80029dc <HAL_RCC_OscConfig+0x298>
 80029b4:	40021000 	.word	0x40021000
 80029b8:	08003c50 	.word	0x08003c50
 80029bc:	20000004 	.word	0x20000004
 80029c0:	20000018 	.word	0x20000018
 80029c4:	4ba0      	ldr	r3, [pc, #640]	; (8002c48 <HAL_RCC_OscConfig+0x504>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a9f      	ldr	r2, [pc, #636]	; (8002c48 <HAL_RCC_OscConfig+0x504>)
 80029ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ce:	6013      	str	r3, [r2, #0]
 80029d0:	4b9d      	ldr	r3, [pc, #628]	; (8002c48 <HAL_RCC_OscConfig+0x504>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a9c      	ldr	r2, [pc, #624]	; (8002c48 <HAL_RCC_OscConfig+0x504>)
 80029d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d013      	beq.n	8002a0c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e4:	f7fe fee0 	bl	80017a8 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029ec:	f7fe fedc 	bl	80017a8 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b64      	cmp	r3, #100	; 0x64
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e2ae      	b.n	8002f5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029fe:	4b92      	ldr	r3, [pc, #584]	; (8002c48 <HAL_RCC_OscConfig+0x504>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d0f0      	beq.n	80029ec <HAL_RCC_OscConfig+0x2a8>
 8002a0a:	e014      	b.n	8002a36 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0c:	f7fe fecc 	bl	80017a8 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a14:	f7fe fec8 	bl	80017a8 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b64      	cmp	r3, #100	; 0x64
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e29a      	b.n	8002f5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a26:	4b88      	ldr	r3, [pc, #544]	; (8002c48 <HAL_RCC_OscConfig+0x504>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f0      	bne.n	8002a14 <HAL_RCC_OscConfig+0x2d0>
 8002a32:	e000      	b.n	8002a36 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d060      	beq.n	8002b04 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	2b04      	cmp	r3, #4
 8002a46:	d005      	beq.n	8002a54 <HAL_RCC_OscConfig+0x310>
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	2b0c      	cmp	r3, #12
 8002a4c:	d119      	bne.n	8002a82 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d116      	bne.n	8002a82 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a54:	4b7c      	ldr	r3, [pc, #496]	; (8002c48 <HAL_RCC_OscConfig+0x504>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d005      	beq.n	8002a6c <HAL_RCC_OscConfig+0x328>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e277      	b.n	8002f5c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a6c:	4b76      	ldr	r3, [pc, #472]	; (8002c48 <HAL_RCC_OscConfig+0x504>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	061b      	lsls	r3, r3, #24
 8002a7a:	4973      	ldr	r1, [pc, #460]	; (8002c48 <HAL_RCC_OscConfig+0x504>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a80:	e040      	b.n	8002b04 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d023      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a8a:	4b6f      	ldr	r3, [pc, #444]	; (8002c48 <HAL_RCC_OscConfig+0x504>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a6e      	ldr	r2, [pc, #440]	; (8002c48 <HAL_RCC_OscConfig+0x504>)
 8002a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a96:	f7fe fe87 	bl	80017a8 <HAL_GetTick>
 8002a9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a9c:	e008      	b.n	8002ab0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a9e:	f7fe fe83 	bl	80017a8 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e255      	b.n	8002f5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ab0:	4b65      	ldr	r3, [pc, #404]	; (8002c48 <HAL_RCC_OscConfig+0x504>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d0f0      	beq.n	8002a9e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002abc:	4b62      	ldr	r3, [pc, #392]	; (8002c48 <HAL_RCC_OscConfig+0x504>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	061b      	lsls	r3, r3, #24
 8002aca:	495f      	ldr	r1, [pc, #380]	; (8002c48 <HAL_RCC_OscConfig+0x504>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	604b      	str	r3, [r1, #4]
 8002ad0:	e018      	b.n	8002b04 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ad2:	4b5d      	ldr	r3, [pc, #372]	; (8002c48 <HAL_RCC_OscConfig+0x504>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a5c      	ldr	r2, [pc, #368]	; (8002c48 <HAL_RCC_OscConfig+0x504>)
 8002ad8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002adc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ade:	f7fe fe63 	bl	80017a8 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ae6:	f7fe fe5f 	bl	80017a8 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e231      	b.n	8002f5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002af8:	4b53      	ldr	r3, [pc, #332]	; (8002c48 <HAL_RCC_OscConfig+0x504>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1f0      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0308 	and.w	r3, r3, #8
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d03c      	beq.n	8002b8a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d01c      	beq.n	8002b52 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b18:	4b4b      	ldr	r3, [pc, #300]	; (8002c48 <HAL_RCC_OscConfig+0x504>)
 8002b1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b1e:	4a4a      	ldr	r2, [pc, #296]	; (8002c48 <HAL_RCC_OscConfig+0x504>)
 8002b20:	f043 0301 	orr.w	r3, r3, #1
 8002b24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b28:	f7fe fe3e 	bl	80017a8 <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b30:	f7fe fe3a 	bl	80017a8 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e20c      	b.n	8002f5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b42:	4b41      	ldr	r3, [pc, #260]	; (8002c48 <HAL_RCC_OscConfig+0x504>)
 8002b44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0ef      	beq.n	8002b30 <HAL_RCC_OscConfig+0x3ec>
 8002b50:	e01b      	b.n	8002b8a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b52:	4b3d      	ldr	r3, [pc, #244]	; (8002c48 <HAL_RCC_OscConfig+0x504>)
 8002b54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b58:	4a3b      	ldr	r2, [pc, #236]	; (8002c48 <HAL_RCC_OscConfig+0x504>)
 8002b5a:	f023 0301 	bic.w	r3, r3, #1
 8002b5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b62:	f7fe fe21 	bl	80017a8 <HAL_GetTick>
 8002b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b68:	e008      	b.n	8002b7c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b6a:	f7fe fe1d 	bl	80017a8 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e1ef      	b.n	8002f5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b7c:	4b32      	ldr	r3, [pc, #200]	; (8002c48 <HAL_RCC_OscConfig+0x504>)
 8002b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1ef      	bne.n	8002b6a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0304 	and.w	r3, r3, #4
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 80a6 	beq.w	8002ce4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b9c:	4b2a      	ldr	r3, [pc, #168]	; (8002c48 <HAL_RCC_OscConfig+0x504>)
 8002b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d10d      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ba8:	4b27      	ldr	r3, [pc, #156]	; (8002c48 <HAL_RCC_OscConfig+0x504>)
 8002baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bac:	4a26      	ldr	r2, [pc, #152]	; (8002c48 <HAL_RCC_OscConfig+0x504>)
 8002bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb2:	6593      	str	r3, [r2, #88]	; 0x58
 8002bb4:	4b24      	ldr	r3, [pc, #144]	; (8002c48 <HAL_RCC_OscConfig+0x504>)
 8002bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bbc:	60bb      	str	r3, [r7, #8]
 8002bbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bc4:	4b21      	ldr	r3, [pc, #132]	; (8002c4c <HAL_RCC_OscConfig+0x508>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d118      	bne.n	8002c02 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bd0:	4b1e      	ldr	r3, [pc, #120]	; (8002c4c <HAL_RCC_OscConfig+0x508>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a1d      	ldr	r2, [pc, #116]	; (8002c4c <HAL_RCC_OscConfig+0x508>)
 8002bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bda:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bdc:	f7fe fde4 	bl	80017a8 <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002be4:	f7fe fde0 	bl	80017a8 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e1b2      	b.n	8002f5c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bf6:	4b15      	ldr	r3, [pc, #84]	; (8002c4c <HAL_RCC_OscConfig+0x508>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d0f0      	beq.n	8002be4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d108      	bne.n	8002c1c <HAL_RCC_OscConfig+0x4d8>
 8002c0a:	4b0f      	ldr	r3, [pc, #60]	; (8002c48 <HAL_RCC_OscConfig+0x504>)
 8002c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c10:	4a0d      	ldr	r2, [pc, #52]	; (8002c48 <HAL_RCC_OscConfig+0x504>)
 8002c12:	f043 0301 	orr.w	r3, r3, #1
 8002c16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c1a:	e029      	b.n	8002c70 <HAL_RCC_OscConfig+0x52c>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	2b05      	cmp	r3, #5
 8002c22:	d115      	bne.n	8002c50 <HAL_RCC_OscConfig+0x50c>
 8002c24:	4b08      	ldr	r3, [pc, #32]	; (8002c48 <HAL_RCC_OscConfig+0x504>)
 8002c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2a:	4a07      	ldr	r2, [pc, #28]	; (8002c48 <HAL_RCC_OscConfig+0x504>)
 8002c2c:	f043 0304 	orr.w	r3, r3, #4
 8002c30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c34:	4b04      	ldr	r3, [pc, #16]	; (8002c48 <HAL_RCC_OscConfig+0x504>)
 8002c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c3a:	4a03      	ldr	r2, [pc, #12]	; (8002c48 <HAL_RCC_OscConfig+0x504>)
 8002c3c:	f043 0301 	orr.w	r3, r3, #1
 8002c40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c44:	e014      	b.n	8002c70 <HAL_RCC_OscConfig+0x52c>
 8002c46:	bf00      	nop
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	40007000 	.word	0x40007000
 8002c50:	4b9a      	ldr	r3, [pc, #616]	; (8002ebc <HAL_RCC_OscConfig+0x778>)
 8002c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c56:	4a99      	ldr	r2, [pc, #612]	; (8002ebc <HAL_RCC_OscConfig+0x778>)
 8002c58:	f023 0301 	bic.w	r3, r3, #1
 8002c5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c60:	4b96      	ldr	r3, [pc, #600]	; (8002ebc <HAL_RCC_OscConfig+0x778>)
 8002c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c66:	4a95      	ldr	r2, [pc, #596]	; (8002ebc <HAL_RCC_OscConfig+0x778>)
 8002c68:	f023 0304 	bic.w	r3, r3, #4
 8002c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d016      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c78:	f7fe fd96 	bl	80017a8 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c7e:	e00a      	b.n	8002c96 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c80:	f7fe fd92 	bl	80017a8 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e162      	b.n	8002f5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c96:	4b89      	ldr	r3, [pc, #548]	; (8002ebc <HAL_RCC_OscConfig+0x778>)
 8002c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0ed      	beq.n	8002c80 <HAL_RCC_OscConfig+0x53c>
 8002ca4:	e015      	b.n	8002cd2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca6:	f7fe fd7f 	bl	80017a8 <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cac:	e00a      	b.n	8002cc4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cae:	f7fe fd7b 	bl	80017a8 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e14b      	b.n	8002f5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cc4:	4b7d      	ldr	r3, [pc, #500]	; (8002ebc <HAL_RCC_OscConfig+0x778>)
 8002cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1ed      	bne.n	8002cae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cd2:	7ffb      	ldrb	r3, [r7, #31]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d105      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cd8:	4b78      	ldr	r3, [pc, #480]	; (8002ebc <HAL_RCC_OscConfig+0x778>)
 8002cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cdc:	4a77      	ldr	r2, [pc, #476]	; (8002ebc <HAL_RCC_OscConfig+0x778>)
 8002cde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ce2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0320 	and.w	r3, r3, #32
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d03c      	beq.n	8002d6a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d01c      	beq.n	8002d32 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002cf8:	4b70      	ldr	r3, [pc, #448]	; (8002ebc <HAL_RCC_OscConfig+0x778>)
 8002cfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cfe:	4a6f      	ldr	r2, [pc, #444]	; (8002ebc <HAL_RCC_OscConfig+0x778>)
 8002d00:	f043 0301 	orr.w	r3, r3, #1
 8002d04:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d08:	f7fe fd4e 	bl	80017a8 <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d10:	f7fe fd4a 	bl	80017a8 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e11c      	b.n	8002f5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d22:	4b66      	ldr	r3, [pc, #408]	; (8002ebc <HAL_RCC_OscConfig+0x778>)
 8002d24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d0ef      	beq.n	8002d10 <HAL_RCC_OscConfig+0x5cc>
 8002d30:	e01b      	b.n	8002d6a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d32:	4b62      	ldr	r3, [pc, #392]	; (8002ebc <HAL_RCC_OscConfig+0x778>)
 8002d34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d38:	4a60      	ldr	r2, [pc, #384]	; (8002ebc <HAL_RCC_OscConfig+0x778>)
 8002d3a:	f023 0301 	bic.w	r3, r3, #1
 8002d3e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d42:	f7fe fd31 	bl	80017a8 <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d4a:	f7fe fd2d 	bl	80017a8 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e0ff      	b.n	8002f5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d5c:	4b57      	ldr	r3, [pc, #348]	; (8002ebc <HAL_RCC_OscConfig+0x778>)
 8002d5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1ef      	bne.n	8002d4a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f000 80f3 	beq.w	8002f5a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	f040 80c9 	bne.w	8002f10 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d7e:	4b4f      	ldr	r3, [pc, #316]	; (8002ebc <HAL_RCC_OscConfig+0x778>)
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f003 0203 	and.w	r2, r3, #3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d12c      	bne.n	8002dec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d123      	bne.n	8002dec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dae:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d11b      	bne.n	8002dec <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dbe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d113      	bne.n	8002dec <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dce:	085b      	lsrs	r3, r3, #1
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d109      	bne.n	8002dec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	085b      	lsrs	r3, r3, #1
 8002de4:	3b01      	subs	r3, #1
 8002de6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d06b      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	2b0c      	cmp	r3, #12
 8002df0:	d062      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002df2:	4b32      	ldr	r3, [pc, #200]	; (8002ebc <HAL_RCC_OscConfig+0x778>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e0ac      	b.n	8002f5c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e02:	4b2e      	ldr	r3, [pc, #184]	; (8002ebc <HAL_RCC_OscConfig+0x778>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a2d      	ldr	r2, [pc, #180]	; (8002ebc <HAL_RCC_OscConfig+0x778>)
 8002e08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e0c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e0e:	f7fe fccb 	bl	80017a8 <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e14:	e008      	b.n	8002e28 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e16:	f7fe fcc7 	bl	80017a8 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e099      	b.n	8002f5c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e28:	4b24      	ldr	r3, [pc, #144]	; (8002ebc <HAL_RCC_OscConfig+0x778>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1f0      	bne.n	8002e16 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e34:	4b21      	ldr	r3, [pc, #132]	; (8002ebc <HAL_RCC_OscConfig+0x778>)
 8002e36:	68da      	ldr	r2, [r3, #12]
 8002e38:	4b21      	ldr	r3, [pc, #132]	; (8002ec0 <HAL_RCC_OscConfig+0x77c>)
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e44:	3a01      	subs	r2, #1
 8002e46:	0112      	lsls	r2, r2, #4
 8002e48:	4311      	orrs	r1, r2
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e4e:	0212      	lsls	r2, r2, #8
 8002e50:	4311      	orrs	r1, r2
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e56:	0852      	lsrs	r2, r2, #1
 8002e58:	3a01      	subs	r2, #1
 8002e5a:	0552      	lsls	r2, r2, #21
 8002e5c:	4311      	orrs	r1, r2
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e62:	0852      	lsrs	r2, r2, #1
 8002e64:	3a01      	subs	r2, #1
 8002e66:	0652      	lsls	r2, r2, #25
 8002e68:	4311      	orrs	r1, r2
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e6e:	06d2      	lsls	r2, r2, #27
 8002e70:	430a      	orrs	r2, r1
 8002e72:	4912      	ldr	r1, [pc, #72]	; (8002ebc <HAL_RCC_OscConfig+0x778>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e78:	4b10      	ldr	r3, [pc, #64]	; (8002ebc <HAL_RCC_OscConfig+0x778>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a0f      	ldr	r2, [pc, #60]	; (8002ebc <HAL_RCC_OscConfig+0x778>)
 8002e7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e82:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e84:	4b0d      	ldr	r3, [pc, #52]	; (8002ebc <HAL_RCC_OscConfig+0x778>)
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	4a0c      	ldr	r2, [pc, #48]	; (8002ebc <HAL_RCC_OscConfig+0x778>)
 8002e8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e8e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e90:	f7fe fc8a 	bl	80017a8 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e98:	f7fe fc86 	bl	80017a8 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e058      	b.n	8002f5c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eaa:	4b04      	ldr	r3, [pc, #16]	; (8002ebc <HAL_RCC_OscConfig+0x778>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0f0      	beq.n	8002e98 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002eb6:	e050      	b.n	8002f5a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e04f      	b.n	8002f5c <HAL_RCC_OscConfig+0x818>
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ec4:	4b27      	ldr	r3, [pc, #156]	; (8002f64 <HAL_RCC_OscConfig+0x820>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d144      	bne.n	8002f5a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ed0:	4b24      	ldr	r3, [pc, #144]	; (8002f64 <HAL_RCC_OscConfig+0x820>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a23      	ldr	r2, [pc, #140]	; (8002f64 <HAL_RCC_OscConfig+0x820>)
 8002ed6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eda:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002edc:	4b21      	ldr	r3, [pc, #132]	; (8002f64 <HAL_RCC_OscConfig+0x820>)
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	4a20      	ldr	r2, [pc, #128]	; (8002f64 <HAL_RCC_OscConfig+0x820>)
 8002ee2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ee6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ee8:	f7fe fc5e 	bl	80017a8 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef0:	f7fe fc5a 	bl	80017a8 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e02c      	b.n	8002f5c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f02:	4b18      	ldr	r3, [pc, #96]	; (8002f64 <HAL_RCC_OscConfig+0x820>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0f0      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x7ac>
 8002f0e:	e024      	b.n	8002f5a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	2b0c      	cmp	r3, #12
 8002f14:	d01f      	beq.n	8002f56 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f16:	4b13      	ldr	r3, [pc, #76]	; (8002f64 <HAL_RCC_OscConfig+0x820>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a12      	ldr	r2, [pc, #72]	; (8002f64 <HAL_RCC_OscConfig+0x820>)
 8002f1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f22:	f7fe fc41 	bl	80017a8 <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f28:	e008      	b.n	8002f3c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f2a:	f7fe fc3d 	bl	80017a8 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e00f      	b.n	8002f5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f3c:	4b09      	ldr	r3, [pc, #36]	; (8002f64 <HAL_RCC_OscConfig+0x820>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1f0      	bne.n	8002f2a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002f48:	4b06      	ldr	r3, [pc, #24]	; (8002f64 <HAL_RCC_OscConfig+0x820>)
 8002f4a:	68da      	ldr	r2, [r3, #12]
 8002f4c:	4905      	ldr	r1, [pc, #20]	; (8002f64 <HAL_RCC_OscConfig+0x820>)
 8002f4e:	4b06      	ldr	r3, [pc, #24]	; (8002f68 <HAL_RCC_OscConfig+0x824>)
 8002f50:	4013      	ands	r3, r2
 8002f52:	60cb      	str	r3, [r1, #12]
 8002f54:	e001      	b.n	8002f5a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e000      	b.n	8002f5c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3720      	adds	r7, #32
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40021000 	.word	0x40021000
 8002f68:	feeefffc 	.word	0xfeeefffc

08002f6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d101      	bne.n	8002f80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e0e7      	b.n	8003150 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f80:	4b75      	ldr	r3, [pc, #468]	; (8003158 <HAL_RCC_ClockConfig+0x1ec>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d910      	bls.n	8002fb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f8e:	4b72      	ldr	r3, [pc, #456]	; (8003158 <HAL_RCC_ClockConfig+0x1ec>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f023 0207 	bic.w	r2, r3, #7
 8002f96:	4970      	ldr	r1, [pc, #448]	; (8003158 <HAL_RCC_ClockConfig+0x1ec>)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9e:	4b6e      	ldr	r3, [pc, #440]	; (8003158 <HAL_RCC_ClockConfig+0x1ec>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d001      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e0cf      	b.n	8003150 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d010      	beq.n	8002fde <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	4b66      	ldr	r3, [pc, #408]	; (800315c <HAL_RCC_ClockConfig+0x1f0>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d908      	bls.n	8002fde <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fcc:	4b63      	ldr	r3, [pc, #396]	; (800315c <HAL_RCC_ClockConfig+0x1f0>)
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	4960      	ldr	r1, [pc, #384]	; (800315c <HAL_RCC_ClockConfig+0x1f0>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d04c      	beq.n	8003084 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2b03      	cmp	r3, #3
 8002ff0:	d107      	bne.n	8003002 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ff2:	4b5a      	ldr	r3, [pc, #360]	; (800315c <HAL_RCC_ClockConfig+0x1f0>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d121      	bne.n	8003042 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e0a6      	b.n	8003150 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2b02      	cmp	r3, #2
 8003008:	d107      	bne.n	800301a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800300a:	4b54      	ldr	r3, [pc, #336]	; (800315c <HAL_RCC_ClockConfig+0x1f0>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d115      	bne.n	8003042 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e09a      	b.n	8003150 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d107      	bne.n	8003032 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003022:	4b4e      	ldr	r3, [pc, #312]	; (800315c <HAL_RCC_ClockConfig+0x1f0>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d109      	bne.n	8003042 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e08e      	b.n	8003150 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003032:	4b4a      	ldr	r3, [pc, #296]	; (800315c <HAL_RCC_ClockConfig+0x1f0>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e086      	b.n	8003150 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003042:	4b46      	ldr	r3, [pc, #280]	; (800315c <HAL_RCC_ClockConfig+0x1f0>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f023 0203 	bic.w	r2, r3, #3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	4943      	ldr	r1, [pc, #268]	; (800315c <HAL_RCC_ClockConfig+0x1f0>)
 8003050:	4313      	orrs	r3, r2
 8003052:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003054:	f7fe fba8 	bl	80017a8 <HAL_GetTick>
 8003058:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305a:	e00a      	b.n	8003072 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800305c:	f7fe fba4 	bl	80017a8 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	f241 3288 	movw	r2, #5000	; 0x1388
 800306a:	4293      	cmp	r3, r2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e06e      	b.n	8003150 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003072:	4b3a      	ldr	r3, [pc, #232]	; (800315c <HAL_RCC_ClockConfig+0x1f0>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 020c 	and.w	r2, r3, #12
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	429a      	cmp	r2, r3
 8003082:	d1eb      	bne.n	800305c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d010      	beq.n	80030b2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	4b31      	ldr	r3, [pc, #196]	; (800315c <HAL_RCC_ClockConfig+0x1f0>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800309c:	429a      	cmp	r2, r3
 800309e:	d208      	bcs.n	80030b2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030a0:	4b2e      	ldr	r3, [pc, #184]	; (800315c <HAL_RCC_ClockConfig+0x1f0>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	492b      	ldr	r1, [pc, #172]	; (800315c <HAL_RCC_ClockConfig+0x1f0>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030b2:	4b29      	ldr	r3, [pc, #164]	; (8003158 <HAL_RCC_ClockConfig+0x1ec>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d210      	bcs.n	80030e2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c0:	4b25      	ldr	r3, [pc, #148]	; (8003158 <HAL_RCC_ClockConfig+0x1ec>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f023 0207 	bic.w	r2, r3, #7
 80030c8:	4923      	ldr	r1, [pc, #140]	; (8003158 <HAL_RCC_ClockConfig+0x1ec>)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d0:	4b21      	ldr	r3, [pc, #132]	; (8003158 <HAL_RCC_ClockConfig+0x1ec>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d001      	beq.n	80030e2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e036      	b.n	8003150 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0304 	and.w	r3, r3, #4
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d008      	beq.n	8003100 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030ee:	4b1b      	ldr	r3, [pc, #108]	; (800315c <HAL_RCC_ClockConfig+0x1f0>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	4918      	ldr	r1, [pc, #96]	; (800315c <HAL_RCC_ClockConfig+0x1f0>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0308 	and.w	r3, r3, #8
 8003108:	2b00      	cmp	r3, #0
 800310a:	d009      	beq.n	8003120 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800310c:	4b13      	ldr	r3, [pc, #76]	; (800315c <HAL_RCC_ClockConfig+0x1f0>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	4910      	ldr	r1, [pc, #64]	; (800315c <HAL_RCC_ClockConfig+0x1f0>)
 800311c:	4313      	orrs	r3, r2
 800311e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003120:	f000 f824 	bl	800316c <HAL_RCC_GetSysClockFreq>
 8003124:	4602      	mov	r2, r0
 8003126:	4b0d      	ldr	r3, [pc, #52]	; (800315c <HAL_RCC_ClockConfig+0x1f0>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	091b      	lsrs	r3, r3, #4
 800312c:	f003 030f 	and.w	r3, r3, #15
 8003130:	490b      	ldr	r1, [pc, #44]	; (8003160 <HAL_RCC_ClockConfig+0x1f4>)
 8003132:	5ccb      	ldrb	r3, [r1, r3]
 8003134:	f003 031f 	and.w	r3, r3, #31
 8003138:	fa22 f303 	lsr.w	r3, r2, r3
 800313c:	4a09      	ldr	r2, [pc, #36]	; (8003164 <HAL_RCC_ClockConfig+0x1f8>)
 800313e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003140:	4b09      	ldr	r3, [pc, #36]	; (8003168 <HAL_RCC_ClockConfig+0x1fc>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4618      	mov	r0, r3
 8003146:	f7fe fadf 	bl	8001708 <HAL_InitTick>
 800314a:	4603      	mov	r3, r0
 800314c:	72fb      	strb	r3, [r7, #11]

  return status;
 800314e:	7afb      	ldrb	r3, [r7, #11]
}
 8003150:	4618      	mov	r0, r3
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40022000 	.word	0x40022000
 800315c:	40021000 	.word	0x40021000
 8003160:	08003c50 	.word	0x08003c50
 8003164:	20000004 	.word	0x20000004
 8003168:	20000018 	.word	0x20000018

0800316c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800316c:	b480      	push	{r7}
 800316e:	b089      	sub	sp, #36	; 0x24
 8003170:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003172:	2300      	movs	r3, #0
 8003174:	61fb      	str	r3, [r7, #28]
 8003176:	2300      	movs	r3, #0
 8003178:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800317a:	4b3e      	ldr	r3, [pc, #248]	; (8003274 <HAL_RCC_GetSysClockFreq+0x108>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 030c 	and.w	r3, r3, #12
 8003182:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003184:	4b3b      	ldr	r3, [pc, #236]	; (8003274 <HAL_RCC_GetSysClockFreq+0x108>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f003 0303 	and.w	r3, r3, #3
 800318c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d005      	beq.n	80031a0 <HAL_RCC_GetSysClockFreq+0x34>
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	2b0c      	cmp	r3, #12
 8003198:	d121      	bne.n	80031de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d11e      	bne.n	80031de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80031a0:	4b34      	ldr	r3, [pc, #208]	; (8003274 <HAL_RCC_GetSysClockFreq+0x108>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0308 	and.w	r3, r3, #8
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d107      	bne.n	80031bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80031ac:	4b31      	ldr	r3, [pc, #196]	; (8003274 <HAL_RCC_GetSysClockFreq+0x108>)
 80031ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031b2:	0a1b      	lsrs	r3, r3, #8
 80031b4:	f003 030f 	and.w	r3, r3, #15
 80031b8:	61fb      	str	r3, [r7, #28]
 80031ba:	e005      	b.n	80031c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80031bc:	4b2d      	ldr	r3, [pc, #180]	; (8003274 <HAL_RCC_GetSysClockFreq+0x108>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	091b      	lsrs	r3, r3, #4
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80031c8:	4a2b      	ldr	r2, [pc, #172]	; (8003278 <HAL_RCC_GetSysClockFreq+0x10c>)
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10d      	bne.n	80031f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031dc:	e00a      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	2b04      	cmp	r3, #4
 80031e2:	d102      	bne.n	80031ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031e4:	4b25      	ldr	r3, [pc, #148]	; (800327c <HAL_RCC_GetSysClockFreq+0x110>)
 80031e6:	61bb      	str	r3, [r7, #24]
 80031e8:	e004      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	d101      	bne.n	80031f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031f0:	4b23      	ldr	r3, [pc, #140]	; (8003280 <HAL_RCC_GetSysClockFreq+0x114>)
 80031f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	2b0c      	cmp	r3, #12
 80031f8:	d134      	bne.n	8003264 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031fa:	4b1e      	ldr	r3, [pc, #120]	; (8003274 <HAL_RCC_GetSysClockFreq+0x108>)
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	2b02      	cmp	r3, #2
 8003208:	d003      	beq.n	8003212 <HAL_RCC_GetSysClockFreq+0xa6>
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	2b03      	cmp	r3, #3
 800320e:	d003      	beq.n	8003218 <HAL_RCC_GetSysClockFreq+0xac>
 8003210:	e005      	b.n	800321e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003212:	4b1a      	ldr	r3, [pc, #104]	; (800327c <HAL_RCC_GetSysClockFreq+0x110>)
 8003214:	617b      	str	r3, [r7, #20]
      break;
 8003216:	e005      	b.n	8003224 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003218:	4b19      	ldr	r3, [pc, #100]	; (8003280 <HAL_RCC_GetSysClockFreq+0x114>)
 800321a:	617b      	str	r3, [r7, #20]
      break;
 800321c:	e002      	b.n	8003224 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	617b      	str	r3, [r7, #20]
      break;
 8003222:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003224:	4b13      	ldr	r3, [pc, #76]	; (8003274 <HAL_RCC_GetSysClockFreq+0x108>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	091b      	lsrs	r3, r3, #4
 800322a:	f003 0307 	and.w	r3, r3, #7
 800322e:	3301      	adds	r3, #1
 8003230:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003232:	4b10      	ldr	r3, [pc, #64]	; (8003274 <HAL_RCC_GetSysClockFreq+0x108>)
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	0a1b      	lsrs	r3, r3, #8
 8003238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	fb03 f202 	mul.w	r2, r3, r2
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	fbb2 f3f3 	udiv	r3, r2, r3
 8003248:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800324a:	4b0a      	ldr	r3, [pc, #40]	; (8003274 <HAL_RCC_GetSysClockFreq+0x108>)
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	0e5b      	lsrs	r3, r3, #25
 8003250:	f003 0303 	and.w	r3, r3, #3
 8003254:	3301      	adds	r3, #1
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003262:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003264:	69bb      	ldr	r3, [r7, #24]
}
 8003266:	4618      	mov	r0, r3
 8003268:	3724      	adds	r7, #36	; 0x24
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	40021000 	.word	0x40021000
 8003278:	08003c60 	.word	0x08003c60
 800327c:	00f42400 	.word	0x00f42400
 8003280:	007a1200 	.word	0x007a1200

08003284 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800328c:	2300      	movs	r3, #0
 800328e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003290:	4b2a      	ldr	r3, [pc, #168]	; (800333c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d003      	beq.n	80032a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800329c:	f7ff f9ee 	bl	800267c <HAL_PWREx_GetVoltageRange>
 80032a0:	6178      	str	r0, [r7, #20]
 80032a2:	e014      	b.n	80032ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80032a4:	4b25      	ldr	r3, [pc, #148]	; (800333c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a8:	4a24      	ldr	r2, [pc, #144]	; (800333c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ae:	6593      	str	r3, [r2, #88]	; 0x58
 80032b0:	4b22      	ldr	r3, [pc, #136]	; (800333c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b8:	60fb      	str	r3, [r7, #12]
 80032ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80032bc:	f7ff f9de 	bl	800267c <HAL_PWREx_GetVoltageRange>
 80032c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80032c2:	4b1e      	ldr	r3, [pc, #120]	; (800333c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c6:	4a1d      	ldr	r2, [pc, #116]	; (800333c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032cc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032d4:	d10b      	bne.n	80032ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2b80      	cmp	r3, #128	; 0x80
 80032da:	d919      	bls.n	8003310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2ba0      	cmp	r3, #160	; 0xa0
 80032e0:	d902      	bls.n	80032e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032e2:	2302      	movs	r3, #2
 80032e4:	613b      	str	r3, [r7, #16]
 80032e6:	e013      	b.n	8003310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032e8:	2301      	movs	r3, #1
 80032ea:	613b      	str	r3, [r7, #16]
 80032ec:	e010      	b.n	8003310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b80      	cmp	r3, #128	; 0x80
 80032f2:	d902      	bls.n	80032fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80032f4:	2303      	movs	r3, #3
 80032f6:	613b      	str	r3, [r7, #16]
 80032f8:	e00a      	b.n	8003310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2b80      	cmp	r3, #128	; 0x80
 80032fe:	d102      	bne.n	8003306 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003300:	2302      	movs	r3, #2
 8003302:	613b      	str	r3, [r7, #16]
 8003304:	e004      	b.n	8003310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b70      	cmp	r3, #112	; 0x70
 800330a:	d101      	bne.n	8003310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800330c:	2301      	movs	r3, #1
 800330e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003310:	4b0b      	ldr	r3, [pc, #44]	; (8003340 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f023 0207 	bic.w	r2, r3, #7
 8003318:	4909      	ldr	r1, [pc, #36]	; (8003340 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	4313      	orrs	r3, r2
 800331e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003320:	4b07      	ldr	r3, [pc, #28]	; (8003340 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	429a      	cmp	r2, r3
 800332c:	d001      	beq.n	8003332 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e000      	b.n	8003334 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3718      	adds	r7, #24
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40021000 	.word	0x40021000
 8003340:	40022000 	.word	0x40022000

08003344 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800334c:	2300      	movs	r3, #0
 800334e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003350:	2300      	movs	r3, #0
 8003352:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800335c:	2b00      	cmp	r3, #0
 800335e:	d031      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003364:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003368:	d01a      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800336a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800336e:	d814      	bhi.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003370:	2b00      	cmp	r3, #0
 8003372:	d009      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003374:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003378:	d10f      	bne.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800337a:	4b5d      	ldr	r3, [pc, #372]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	4a5c      	ldr	r2, [pc, #368]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003384:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003386:	e00c      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3304      	adds	r3, #4
 800338c:	2100      	movs	r1, #0
 800338e:	4618      	mov	r0, r3
 8003390:	f000 f9ce 	bl	8003730 <RCCEx_PLLSAI1_Config>
 8003394:	4603      	mov	r3, r0
 8003396:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003398:	e003      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	74fb      	strb	r3, [r7, #19]
      break;
 800339e:	e000      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80033a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033a2:	7cfb      	ldrb	r3, [r7, #19]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10b      	bne.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033a8:	4b51      	ldr	r3, [pc, #324]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b6:	494e      	ldr	r1, [pc, #312]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80033be:	e001      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c0:	7cfb      	ldrb	r3, [r7, #19]
 80033c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f000 809e 	beq.w	800350e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033d2:	2300      	movs	r3, #0
 80033d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033d6:	4b46      	ldr	r3, [pc, #280]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80033e2:	2301      	movs	r3, #1
 80033e4:	e000      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80033e6:	2300      	movs	r3, #0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00d      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ec:	4b40      	ldr	r3, [pc, #256]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f0:	4a3f      	ldr	r2, [pc, #252]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033f6:	6593      	str	r3, [r2, #88]	; 0x58
 80033f8:	4b3d      	ldr	r3, [pc, #244]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003400:	60bb      	str	r3, [r7, #8]
 8003402:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003404:	2301      	movs	r3, #1
 8003406:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003408:	4b3a      	ldr	r3, [pc, #232]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a39      	ldr	r2, [pc, #228]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800340e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003412:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003414:	f7fe f9c8 	bl	80017a8 <HAL_GetTick>
 8003418:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800341a:	e009      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800341c:	f7fe f9c4 	bl	80017a8 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d902      	bls.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	74fb      	strb	r3, [r7, #19]
        break;
 800342e:	e005      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003430:	4b30      	ldr	r3, [pc, #192]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0ef      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800343c:	7cfb      	ldrb	r3, [r7, #19]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d15a      	bne.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003442:	4b2b      	ldr	r3, [pc, #172]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003448:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800344c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d01e      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	429a      	cmp	r2, r3
 800345c:	d019      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800345e:	4b24      	ldr	r3, [pc, #144]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003468:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800346a:	4b21      	ldr	r3, [pc, #132]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800346c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003470:	4a1f      	ldr	r2, [pc, #124]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003476:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800347a:	4b1d      	ldr	r3, [pc, #116]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800347c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003480:	4a1b      	ldr	r2, [pc, #108]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003486:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800348a:	4a19      	ldr	r2, [pc, #100]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b00      	cmp	r3, #0
 800349a:	d016      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349c:	f7fe f984 	bl	80017a8 <HAL_GetTick>
 80034a0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034a2:	e00b      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a4:	f7fe f980 	bl	80017a8 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d902      	bls.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	74fb      	strb	r3, [r7, #19]
            break;
 80034ba:	e006      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034bc:	4b0c      	ldr	r3, [pc, #48]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d0ec      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80034ca:	7cfb      	ldrb	r3, [r7, #19]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10b      	bne.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034d0:	4b07      	ldr	r3, [pc, #28]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034de:	4904      	ldr	r1, [pc, #16]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80034e6:	e009      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034e8:	7cfb      	ldrb	r3, [r7, #19]
 80034ea:	74bb      	strb	r3, [r7, #18]
 80034ec:	e006      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80034ee:	bf00      	nop
 80034f0:	40021000 	.word	0x40021000
 80034f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f8:	7cfb      	ldrb	r3, [r7, #19]
 80034fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034fc:	7c7b      	ldrb	r3, [r7, #17]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d105      	bne.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003502:	4b8a      	ldr	r3, [pc, #552]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003506:	4a89      	ldr	r2, [pc, #548]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003508:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800350c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00a      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800351a:	4b84      	ldr	r3, [pc, #528]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800351c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003520:	f023 0203 	bic.w	r2, r3, #3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	4980      	ldr	r1, [pc, #512]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800352a:	4313      	orrs	r3, r2
 800352c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00a      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800353c:	4b7b      	ldr	r3, [pc, #492]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800353e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003542:	f023 020c 	bic.w	r2, r3, #12
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354a:	4978      	ldr	r1, [pc, #480]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800354c:	4313      	orrs	r3, r2
 800354e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0320 	and.w	r3, r3, #32
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00a      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800355e:	4b73      	ldr	r3, [pc, #460]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003564:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356c:	496f      	ldr	r1, [pc, #444]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800356e:	4313      	orrs	r3, r2
 8003570:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00a      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003580:	4b6a      	ldr	r3, [pc, #424]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003586:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800358e:	4967      	ldr	r1, [pc, #412]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003590:	4313      	orrs	r3, r2
 8003592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00a      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035a2:	4b62      	ldr	r3, [pc, #392]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b0:	495e      	ldr	r1, [pc, #376]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00a      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035c4:	4b59      	ldr	r3, [pc, #356]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d2:	4956      	ldr	r1, [pc, #344]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00a      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035e6:	4b51      	ldr	r3, [pc, #324]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f4:	494d      	ldr	r1, [pc, #308]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d028      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003608:	4b48      	ldr	r3, [pc, #288]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800360a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	4945      	ldr	r1, [pc, #276]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003618:	4313      	orrs	r3, r2
 800361a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003626:	d106      	bne.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003628:	4b40      	ldr	r3, [pc, #256]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	4a3f      	ldr	r2, [pc, #252]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800362e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003632:	60d3      	str	r3, [r2, #12]
 8003634:	e011      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800363e:	d10c      	bne.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	3304      	adds	r3, #4
 8003644:	2101      	movs	r1, #1
 8003646:	4618      	mov	r0, r3
 8003648:	f000 f872 	bl	8003730 <RCCEx_PLLSAI1_Config>
 800364c:	4603      	mov	r3, r0
 800364e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003650:	7cfb      	ldrb	r3, [r7, #19]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003656:	7cfb      	ldrb	r3, [r7, #19]
 8003658:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d028      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003666:	4b31      	ldr	r3, [pc, #196]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800366c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003674:	492d      	ldr	r1, [pc, #180]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003676:	4313      	orrs	r3, r2
 8003678:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003680:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003684:	d106      	bne.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003686:	4b29      	ldr	r3, [pc, #164]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	4a28      	ldr	r2, [pc, #160]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800368c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003690:	60d3      	str	r3, [r2, #12]
 8003692:	e011      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003698:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800369c:	d10c      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	3304      	adds	r3, #4
 80036a2:	2101      	movs	r1, #1
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 f843 	bl	8003730 <RCCEx_PLLSAI1_Config>
 80036aa:	4603      	mov	r3, r0
 80036ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036ae:	7cfb      	ldrb	r3, [r7, #19]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80036b4:	7cfb      	ldrb	r3, [r7, #19]
 80036b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d01c      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036c4:	4b19      	ldr	r3, [pc, #100]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036d2:	4916      	ldr	r1, [pc, #88]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036e2:	d10c      	bne.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	3304      	adds	r3, #4
 80036e8:	2102      	movs	r1, #2
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 f820 	bl	8003730 <RCCEx_PLLSAI1_Config>
 80036f0:	4603      	mov	r3, r0
 80036f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036f4:	7cfb      	ldrb	r3, [r7, #19]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80036fa:	7cfb      	ldrb	r3, [r7, #19]
 80036fc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00a      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800370a:	4b08      	ldr	r3, [pc, #32]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800370c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003710:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003718:	4904      	ldr	r1, [pc, #16]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800371a:	4313      	orrs	r3, r2
 800371c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003720:	7cbb      	ldrb	r3, [r7, #18]
}
 8003722:	4618      	mov	r0, r3
 8003724:	3718      	adds	r7, #24
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	40021000 	.word	0x40021000

08003730 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800373a:	2300      	movs	r3, #0
 800373c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800373e:	4b74      	ldr	r3, [pc, #464]	; (8003910 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	f003 0303 	and.w	r3, r3, #3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d018      	beq.n	800377c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800374a:	4b71      	ldr	r3, [pc, #452]	; (8003910 <RCCEx_PLLSAI1_Config+0x1e0>)
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	f003 0203 	and.w	r2, r3, #3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	429a      	cmp	r2, r3
 8003758:	d10d      	bne.n	8003776 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
       ||
 800375e:	2b00      	cmp	r3, #0
 8003760:	d009      	beq.n	8003776 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003762:	4b6b      	ldr	r3, [pc, #428]	; (8003910 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	091b      	lsrs	r3, r3, #4
 8003768:	f003 0307 	and.w	r3, r3, #7
 800376c:	1c5a      	adds	r2, r3, #1
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
       ||
 8003772:	429a      	cmp	r2, r3
 8003774:	d047      	beq.n	8003806 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	73fb      	strb	r3, [r7, #15]
 800377a:	e044      	b.n	8003806 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2b03      	cmp	r3, #3
 8003782:	d018      	beq.n	80037b6 <RCCEx_PLLSAI1_Config+0x86>
 8003784:	2b03      	cmp	r3, #3
 8003786:	d825      	bhi.n	80037d4 <RCCEx_PLLSAI1_Config+0xa4>
 8003788:	2b01      	cmp	r3, #1
 800378a:	d002      	beq.n	8003792 <RCCEx_PLLSAI1_Config+0x62>
 800378c:	2b02      	cmp	r3, #2
 800378e:	d009      	beq.n	80037a4 <RCCEx_PLLSAI1_Config+0x74>
 8003790:	e020      	b.n	80037d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003792:	4b5f      	ldr	r3, [pc, #380]	; (8003910 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d11d      	bne.n	80037da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037a2:	e01a      	b.n	80037da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037a4:	4b5a      	ldr	r3, [pc, #360]	; (8003910 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d116      	bne.n	80037de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037b4:	e013      	b.n	80037de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037b6:	4b56      	ldr	r3, [pc, #344]	; (8003910 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10f      	bne.n	80037e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037c2:	4b53      	ldr	r3, [pc, #332]	; (8003910 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d109      	bne.n	80037e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037d2:	e006      	b.n	80037e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	73fb      	strb	r3, [r7, #15]
      break;
 80037d8:	e004      	b.n	80037e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037da:	bf00      	nop
 80037dc:	e002      	b.n	80037e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037de:	bf00      	nop
 80037e0:	e000      	b.n	80037e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80037e4:	7bfb      	ldrb	r3, [r7, #15]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10d      	bne.n	8003806 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80037ea:	4b49      	ldr	r3, [pc, #292]	; (8003910 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6819      	ldr	r1, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	3b01      	subs	r3, #1
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	430b      	orrs	r3, r1
 8003800:	4943      	ldr	r1, [pc, #268]	; (8003910 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003802:	4313      	orrs	r3, r2
 8003804:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003806:	7bfb      	ldrb	r3, [r7, #15]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d17c      	bne.n	8003906 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800380c:	4b40      	ldr	r3, [pc, #256]	; (8003910 <RCCEx_PLLSAI1_Config+0x1e0>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a3f      	ldr	r2, [pc, #252]	; (8003910 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003812:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003816:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003818:	f7fd ffc6 	bl	80017a8 <HAL_GetTick>
 800381c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800381e:	e009      	b.n	8003834 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003820:	f7fd ffc2 	bl	80017a8 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d902      	bls.n	8003834 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	73fb      	strb	r3, [r7, #15]
        break;
 8003832:	e005      	b.n	8003840 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003834:	4b36      	ldr	r3, [pc, #216]	; (8003910 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1ef      	bne.n	8003820 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003840:	7bfb      	ldrb	r3, [r7, #15]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d15f      	bne.n	8003906 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d110      	bne.n	800386e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800384c:	4b30      	ldr	r3, [pc, #192]	; (8003910 <RCCEx_PLLSAI1_Config+0x1e0>)
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003854:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	6892      	ldr	r2, [r2, #8]
 800385c:	0211      	lsls	r1, r2, #8
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	68d2      	ldr	r2, [r2, #12]
 8003862:	06d2      	lsls	r2, r2, #27
 8003864:	430a      	orrs	r2, r1
 8003866:	492a      	ldr	r1, [pc, #168]	; (8003910 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003868:	4313      	orrs	r3, r2
 800386a:	610b      	str	r3, [r1, #16]
 800386c:	e027      	b.n	80038be <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d112      	bne.n	800389a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003874:	4b26      	ldr	r3, [pc, #152]	; (8003910 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800387c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	6892      	ldr	r2, [r2, #8]
 8003884:	0211      	lsls	r1, r2, #8
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	6912      	ldr	r2, [r2, #16]
 800388a:	0852      	lsrs	r2, r2, #1
 800388c:	3a01      	subs	r2, #1
 800388e:	0552      	lsls	r2, r2, #21
 8003890:	430a      	orrs	r2, r1
 8003892:	491f      	ldr	r1, [pc, #124]	; (8003910 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003894:	4313      	orrs	r3, r2
 8003896:	610b      	str	r3, [r1, #16]
 8003898:	e011      	b.n	80038be <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800389a:	4b1d      	ldr	r3, [pc, #116]	; (8003910 <RCCEx_PLLSAI1_Config+0x1e0>)
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80038a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	6892      	ldr	r2, [r2, #8]
 80038aa:	0211      	lsls	r1, r2, #8
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	6952      	ldr	r2, [r2, #20]
 80038b0:	0852      	lsrs	r2, r2, #1
 80038b2:	3a01      	subs	r2, #1
 80038b4:	0652      	lsls	r2, r2, #25
 80038b6:	430a      	orrs	r2, r1
 80038b8:	4915      	ldr	r1, [pc, #84]	; (8003910 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80038be:	4b14      	ldr	r3, [pc, #80]	; (8003910 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a13      	ldr	r2, [pc, #76]	; (8003910 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038c8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ca:	f7fd ff6d 	bl	80017a8 <HAL_GetTick>
 80038ce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038d0:	e009      	b.n	80038e6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038d2:	f7fd ff69 	bl	80017a8 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d902      	bls.n	80038e6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	73fb      	strb	r3, [r7, #15]
          break;
 80038e4:	e005      	b.n	80038f2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038e6:	4b0a      	ldr	r3, [pc, #40]	; (8003910 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0ef      	beq.n	80038d2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80038f2:	7bfb      	ldrb	r3, [r7, #15]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d106      	bne.n	8003906 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80038f8:	4b05      	ldr	r3, [pc, #20]	; (8003910 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038fa:	691a      	ldr	r2, [r3, #16]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	4903      	ldr	r1, [pc, #12]	; (8003910 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003902:	4313      	orrs	r3, r2
 8003904:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003906:	7bfb      	ldrb	r3, [r7, #15]
}
 8003908:	4618      	mov	r0, r3
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	40021000 	.word	0x40021000

08003914 <__libc_init_array>:
 8003914:	b570      	push	{r4, r5, r6, lr}
 8003916:	4d0d      	ldr	r5, [pc, #52]	; (800394c <__libc_init_array+0x38>)
 8003918:	4c0d      	ldr	r4, [pc, #52]	; (8003950 <__libc_init_array+0x3c>)
 800391a:	1b64      	subs	r4, r4, r5
 800391c:	10a4      	asrs	r4, r4, #2
 800391e:	2600      	movs	r6, #0
 8003920:	42a6      	cmp	r6, r4
 8003922:	d109      	bne.n	8003938 <__libc_init_array+0x24>
 8003924:	4d0b      	ldr	r5, [pc, #44]	; (8003954 <__libc_init_array+0x40>)
 8003926:	4c0c      	ldr	r4, [pc, #48]	; (8003958 <__libc_init_array+0x44>)
 8003928:	f000 f820 	bl	800396c <_init>
 800392c:	1b64      	subs	r4, r4, r5
 800392e:	10a4      	asrs	r4, r4, #2
 8003930:	2600      	movs	r6, #0
 8003932:	42a6      	cmp	r6, r4
 8003934:	d105      	bne.n	8003942 <__libc_init_array+0x2e>
 8003936:	bd70      	pop	{r4, r5, r6, pc}
 8003938:	f855 3b04 	ldr.w	r3, [r5], #4
 800393c:	4798      	blx	r3
 800393e:	3601      	adds	r6, #1
 8003940:	e7ee      	b.n	8003920 <__libc_init_array+0xc>
 8003942:	f855 3b04 	ldr.w	r3, [r5], #4
 8003946:	4798      	blx	r3
 8003948:	3601      	adds	r6, #1
 800394a:	e7f2      	b.n	8003932 <__libc_init_array+0x1e>
 800394c:	080049ec 	.word	0x080049ec
 8003950:	080049ec 	.word	0x080049ec
 8003954:	080049ec 	.word	0x080049ec
 8003958:	080049f0 	.word	0x080049f0

0800395c <memset>:
 800395c:	4402      	add	r2, r0
 800395e:	4603      	mov	r3, r0
 8003960:	4293      	cmp	r3, r2
 8003962:	d100      	bne.n	8003966 <memset+0xa>
 8003964:	4770      	bx	lr
 8003966:	f803 1b01 	strb.w	r1, [r3], #1
 800396a:	e7f9      	b.n	8003960 <memset+0x4>

0800396c <_init>:
 800396c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800396e:	bf00      	nop
 8003970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003972:	bc08      	pop	{r3}
 8003974:	469e      	mov	lr, r3
 8003976:	4770      	bx	lr

08003978 <_fini>:
 8003978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800397a:	bf00      	nop
 800397c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800397e:	bc08      	pop	{r3}
 8003980:	469e      	mov	lr, r3
 8003982:	4770      	bx	lr
